#!/usr/bin/env bash

#? git-is-ancestor, Time-stamp: 20221102.1443
#? Copyright (C) 2013-2023 Fabrice Niessen
#?
#? License GPLv3+: GNU GPL version 3 or later <http://gnu.org/licenses/gpl.html>.
#? This is free software: you are free to change and redistribute it.
#? There is NO WARRANTY, to the extent permitted by law.

##? Usage: git-is-ancestor [options] COMMIT_1 COMMIT_2
##?
##? Check if one commit is an ancestor of another.
##?
##? Arguments:
##?   COMMIT_1                      commit (or tag) 1
##?   COMMIT_2                      commit (or tag) 2
##?
##? Options:
##?   -h, --help                    display this help and exit
##?   -V, --version                 display version information and exit
##?
##? Example:
##?   git-is-ancestor 71031cec HEAD determine if current branch contains the commit

# Check if docopts command is available.
command -v docopts > /dev/null 2>&1 || { printf >&2 'Error: docopts command not found.\n'; exit 2; }

help=$(grep "^##?" "$0" | cut -c 5-)
version=$(grep "^#?"  "$0" | cut -c 4-)
parsed="$(docopts -h "$help" -V "$version" : "$@")"
eval "$parsed"

# Check if one commit is an ancestor of the other.
if git merge-base --is-ancestor "$COMMIT_1" "$COMMIT_2"; then
    printf '%s is an ancestor of %s\n' "$COMMIT_1" "$COMMIT_2"
    exit 0
elif git merge-base --is-ancestor "$COMMIT_2" "$COMMIT_1"; then
    printf '%s is an ancestor of %s\n' "$COMMIT_2" "$COMMIT_1"
    exit 0
else
    printf '%s and %s are not related\n' "$COMMIT_1" "$COMMIT_2"
    exit 2
fi
