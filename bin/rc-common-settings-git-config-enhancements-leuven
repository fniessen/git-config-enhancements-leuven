# Hey Emacs, this is a -*- sh -*- file ...

# Check if 'git' command is available.
if ! command -v git &>/dev/null; then
    printf >&2 "Error: The 'git' utility is not installed. Please install it.\n"
else
    # Alias 'g' to 'git'.
    alias g=git
fi

# Check if 'zip' utility is installed.
if ! command -v zip &>/dev/null; then
    printf >&2 "Error: The 'zip' utility is not installed. Please install it.\n"
fi

# Go to the root directory of your Git repo.
alias cdroot='git rev-parse && cd "$(git rev-parse --show-toplevel)"'
                                        ## The above command will not throw an
                                        ## error if you aren't in a Git
                                        ## directory.

# Check if 'tig' command is installed.
if command -v tig &> /dev/null; then
    # Aliases for 'tig' commands.
    alias tigs='tig status'             # Use it all of the time!
    alias tigb='tig blame'
    alias tigall='tig --all'
    alias tigreleases='tig --all --simplify-by-decoration'
fi

# Function to iterate over commit hashes and execute a given Git command.
#
# Example:
#   git-iterate-commits changed-files
#                                 Call the 'git-iterate-commits' function with the
#                                 'changed-files' Git command.
git-iterate-commits() {
    local git_command="$1"

    # Get the previous shell command dynamically.
    local previous_command=$(fc -ln -1)

    # Display the last executed command for debug purposes.
    printf "Last executed command: %s\n\n" "$previous_command"

    # Run the previous command and store its output in git_output variable,
    # suppressing stderr.
    local git_output=$(eval "$previous_command" 2>/dev/null)

    # ANSI escape code for colors.
    gray='\033[90m'
    orange='\033[0;33m'
    reset='\033[0m'                     # Reset to default color.

    # Loop through each line in the output.
    while IFS= read -r line; do
        # Display the current line being processed for debug purposes in gray.
        printf "${gray}Processing line: %s${reset}\n" "$line"

        # Extract the commit hash from the line.
        commit_hash=$(echo "$line" | awk '{print $2}')

        # Check if commit_hash is a valid hash (7 or more hexadecimal characters).
        if [[ ! "$commit_hash" =~ ^[0-9a-fA-F]{7,}$ ]]; then
            # Print message in orange.
            printf "${orange}Skipping invalid commit hash: %s${reset}\n" \
                   "$commit_hash"
            continue
        fi

        # Execute the provided Git command with the commit hash.
        git "$git_command" "$commit_hash"
    done <<< "$git_output"
}
