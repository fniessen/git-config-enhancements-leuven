#!/usr/bin/env bash

#? git-switch-ssh-to-https, Time-stamp: 20221102.1443
#? Copyright (C) 2022-2024 Fabrice Niessen
#?
#? License GPLv3+: GNU GPL version 3 or later <http://gnu.org/licenses/gpl.html>.
#? This is free software: you are free to change and redistribute it.
#? There is NO WARRANTY, to the extent permitted by law.

##? Usage: git-switch-ssh-to-https [options] [REMOTE]
##?
##? Convert Git remote URL from SSH to HTTPS.
##?
##? Arguments:
##?   REMOTE                        remote to use.  Default to origin if no remote is specified.
##?
##? Options:
##?   -h, --help                    display this help and exit
##?   -V, --version                 display version information and exit

# Set -uo pipefail for undefined variable check and pipeline failure propagation.
set -uo pipefail

# Check if 'docopts' command is available.
if ! command -v docopts > /dev/null 2>&1; then
    printf >&2 "Error: 'docopts' command not found.\n"
    exit 2
fi

# Extract help and version information from the script.
help=$(grep "^##?" "$0" | cut -c 5-)
version=$(grep "^#?" "$0" | cut -c 4-)

# Get command-line arguments.
args="$(docopts -h "$help" -V "$version" : "$@")"
eval "$args"

# Set -e to exit on non-zero command status.
set -e

REMOTE=${REMOTE:-"origin"}

# Get the current remote URL.
OLD_URL=$(git remote -v | awk -v REMOTE="$REMOTE" '$1==REMOTE && $3=="(push)" {print $2}')

# Check if the old URL is valid.
if [[ -z "$OLD_URL" ]]; then
    printf >&2 "Error: Could not identify Repo URL.\n"
    exit 2
fi

# Debug: Print the OLD_URL value.
printf "Debug: OLD_URL = %s\n" "$OLD_URL"

# Extract the actual site from the OLD_URL.
SITE=$(echo "$OLD_URL" | sed -Ene "s#git@([^:]*):.*#\1#p")

# Debug: Print the extracted SITE value.
printf "Debug: SITE = %s\n" "$SITE"

# Get the repository owner and name, with debug info.
REPO_OWNER=$(echo "$OLD_URL" | sed -Ene "s#git@$SITE[^:]*:([^/]*)/(.*).git#\1#p")
REPO_SLUG=$(echo "$OLD_URL" | sed -Ene "s#git@$SITE[^:]*:([^/]*)/(.*).git#\2#p")

# Debug: Print the extracted REPO_OWNER and REPO_SLUG values.
printf "Debug: REPO_OWNER = %s\n" "$REPO_OWNER"
printf "Debug: REPO_SLUG = %s\n" "$REPO_SLUG"

# Check if the repo owner and name are valid.
if [[ -z "$REPO_OWNER" ]] || [[ -z "$REPO_SLUG" ]]; then
    printf >&2 "Error: Could not identify REPO_OWNER or REPO_SLUG. It's possible that the repo is already using HTTPS instead of SSH.\n"
    exit 2
fi

# Create the new HTTPS URL.
NEW_URL="https://$SITE/$REPO_OWNER/$REPO_SLUG.git"

# Print the current and new URL for confirmation.
printf "Current remote repository URL:\n      %s\n" "$OLD_URL"
printf "New remote repository URL:\n      %s\n\n" "$NEW_URL"

# Ask for confirmation before updating the remote URL.
read -p "Do you want to update the remote repository URL? (y/N) " -n 1 -r
printf "\n"
if [[ $REPLY =~ ^[Yy]$ ]]; then
    # Update the remote URL.
    git remote set-url $REMOTE $NEW_URL
    printf "\nSuccess: Remote repository URL updated\n"
else
    printf "\nCancelled: Remote repository URL not updated\n"
fi
