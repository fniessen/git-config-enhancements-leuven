#!/usr/bin/env bash

bold=$(tput bold)
reset=$(tput sgr0)

printf 'Update Git repositories in all subdirectories...\n'

# Check and fix the permissions on ~/.ssh/config.
if [[ $(stat -c %a ~/.ssh/config) != 600 ]]; then
    printf 'Bad permissions on ~/.ssh/config. Fixing it...\n'
    chmod 600 ~/.ssh/config
fi

printf 'Searching at most 5 levels of directories...\n'

# Handle directories with spaces in the find command.
while IFS=$'\n' read -r repo_path; do
    printf 'Updating repository %s:\n' "${bold}$repo_path${reset}"
    git -C "$repo_path" remote update --prune # Delete old branches.
    git -C "$repo_path" merge --ff-only "@{u}" # Only merge the current branch.
    # TODO: Check if conflicts were encountered.
    if [[ $? -ne 0 ]]; then
        printf >&2 'Error occurred during merging. Check the repository logs.\n'
    fi
    printf '\n'
done < <(find . -maxdepth 5 -name '.git' -type d -print0 | xargs -0 -I {} dirname {} | sed 's#^./##')

# See https://stackoverflow.com/questions/17099564/make-a-shell-script-to-update-3-git-repos
# See https://medium.com/@codenameyau/updating-multiple-repos-with-one-command-9768c8cdfe46


# find . -name .git -type d \
#     | xargs -n1 -P4 -I% git --git-dir=% --work-tree=%/.. remote update -p
# Using -type d prevents execution for ".git" files inside submodules. Using -P4
# runs four fetches in parallel to speed things up a bit (and continues to make
# progress elsewhere if a single repository hangs). I prefer git remote update -p
# instead of git pull so that I can deal with merge conflicts later or rebase
# after I'm offline.


# Git repositories all have HEAD, refs, objects and config entries.
# on GNU/anything,
#
# find -name HEAD -execdir test -e refs -a -e objects -a -e config \; -printf %h\\n
#
# Just checking for .git will miss many bare repos and all submodules.
#
# this should be the accepted answer: only solution that also works for bare repos also
