#!/usr/bin/env bash

# Pull the latest changes for each Git repository found in the current directory.

# Find all Git repositories under the current directory, using -prune to
# optimize search.
# Redirect stderr to /dev/null to avoid 'permission denied' errors.
find . -type d -name ".git" -prune 2> /dev/null | sort -V | while read -r repo; do
    repo_dir=$(dirname "$repo")
    repo_name=$(basename "$repo_dir")
    printf "\nPulling latest changes for repository '%s'...\n" "$(tput bold)$repo_name$(tput sgr0)"

    # Change to the repository directory.
    cd "$repo_dir" \
        || { printf "$(tput setaf 1)$(tput bold)Failed to change directory to '%s'$(tput sgr0)\n" "$repo_dir"; continue; }

    # Run 'git pull' with a timeout of 10 seconds.
    output=$(timeout 10 git pull 2>&1)
    exit_code=$?

    if [ $exit_code -eq 124 ]; then
        # Timeout occurred, use white bold on red background color.
        printf "$(tput setaf 7)$(tput bold)$(tput setab 1)Timed out while pulling from repository '%s'$(tput sgr0)\n" "$repo_name"
    elif [ $exit_code -ne 0 ]; then
        printf "$(tput setaf 1)$(tput bold)%s$(tput sgr0)\n" "$output" \
            | sed 's/^/        /'
    else
        printf "$(tput setaf 2)%s$(tput sgr0)\n" "$output" \
            | sed 's/^/        /'
    fi

    # Display modified files in yellow bold if there are any.
    modified_files=$(git status --porcelain)
    if [[ -n "$modified_files" ]]; then
        while IFS= read -r line; do
            printf "$(tput setaf 3)$(tput bold)%s$(tput sgr0)\n" "$line" \
                | sed 's/^/        /'
        done <<< "$modified_files"
    fi

    # Return to the previous directory.
    cd - > /dev/null \
        || { printf "$(tput setaf 1)$(tput bold)Failed to return to the previous directory$(tput sgr0)\n"; exit 1; }
done


# #!/usr/bin/env bash
#
# # Pull the latest changes for each Git repository found in the current directory.
#
# # Find all Git repositories recursively and sort them alphabetically.
# find . -type d -name ".git" -prune | sort | while read -r repo; do
#     repo_dir=$(dirname "$repo")
#     repo_name=$(basename "$repo_dir")
#     printf "\nPulling latest changes for repository '%s'...\n" "$(tput bold)$repo_name$(tput sgr0)"
#
#     # Fetch changes from remote.
#     printf "Fetching changes...\n"
#     if ! git -C "$repo_dir" fetch --quiet; then
#         printf "$(tput setaf 1)$(tput bold)Failed to fetch changes. Skipping.$(tput sgr0)\n"
#         continue
#     fi
#
#     # Check if there are changes to pull.
#     if git -C "$repo_dir" status -uno | grep -q 'Your branch is behind'; then
#         # Pull changes from remote.
#         printf "Pulling changes from remote...\n"
#         if ! output=$(git -C "$repo_dir" pull --ff-only); then
#             printf "$(tput setaf 1)$(tput bold)%s$(tput sgr0)\n" "$output"
#         else
#             printf "$(tput setaf 2)Successfully pulled changes.$(tput sgr0)\n"
#         fi
#     else
#         printf "$(tput setaf 2)Already up-to-date.$(tput sgr0)\n"
#     fi
# done
