#!/usr/bin/env bash

# Default GitHub username and personal access token.
default_username="your_github_username"
default_token="your_github_personal_access_token"

# Check if required commands are available.
for cmd in jq; do
    if ! command -v "$cmd" > /dev/null 2>&1; then
        printf >&2 "Error: '%s' command not found.\n" "$cmd"
        exit 2
    fi
done

# Get GitHub username and personal access token from command-line arguments, or
# from a config file, or use default values.
if [[ "$#" -eq 2 ]]; then
    username="$1"
    token="$2"
elif [[ -f "$HOME/.secret/.github_config" ]]; then
    source "$HOME/.secret/.github_config"
elif [[ -f "$HOME/.github_config" ]]; then
    source "$HOME/.github_config"
else
    printf "No GitHub username and personal access token found. Using default values.\n"
    username="$default_username"
    token="$default_token"
fi

# Make API request to list your repositories with pending pull requests.
repos_response=$(curl -s -H "Authorization: token $token" "https://api.github.com/search/issues?q=is:pr+user:$username+state:open")

# Check if curl request failed (e.g., due to network or authentication issues).
if [[ -z "$repos_response" ]]; then
    printf >&2 "Error: Unable to reach GitHub. Please check your internet connection or GitHub token.\n"
    exit 1
fi

# Check for an API error message.
api_error=$(echo "$repos_response" | jq -r '.message?')
if [[ "$api_error" != "null" ]]; then
    printf >&2 "Error from GitHub API: %s\n" "$api_error"
    exit 1
fi

# Process the API response for repositories.
repos=$(echo "$repos_response" | jq -r '.items[].repository_url? | rtrimstr(".git") | split("/") | .[-1]' | sort -u)

# Check if repos is empty.
if [[ -z "$repos" ]]; then
    printf "No repositories with open pull requests found.\n"
    exit 0
fi

# Loop through each repository and print its name, number of pending pull
# requests, and titles of each pull request.
for repo in $repos; do
    pulls_response=$(curl -s -H "Authorization: token $token" "https://api.github.com/repos/$username/$repo/pulls?state=open")

    # Check if the curl request to get pull requests failed.
    if [[ -z "$pulls_response" ]]; then
        printf >&2 "Error: Unable to fetch pull requests for repo %s. Please check your connection.\n" "$repo"
        continue
    fi

    count=$(echo "$pulls_response" | jq '. | length')
    printf "%s: %d pending pull requests\n" "$repo" "$count"

    if [[ "$count" -gt 0 ]]; then
        prs=$(echo "$pulls_response" | jq -r '.[].number')
        for pr in $prs; do
            title=$(curl -s -H "Authorization: token $token" "https://api.github.com/repos/$username/$repo/pulls/$pr" | jq -r '.title')
            printf "  #%d - %s\n" "$pr" "$title"
        done
    fi
    # Add a blank line between each repo, except for the last one.
    if [[ "$repo" != "$(echo $repos | awk '{print $NF}')" ]]; then
        printf "\n"
    fi
done
