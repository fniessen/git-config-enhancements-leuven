#!/usr/bin/env bash

# Push the latest changes for each Git repository found in the current directory.

# Find all Git repositories under the current directory, using -prune to
# optimize search.
# Redirect stderr to /dev/null to avoid 'permission denied' errors.
find . -type d -name ".git" -prune 2>/dev/null | sort | while read -r repo; do
    repo_dir=$(dirname "$repo")
    repo_name=$(basename "$repo_dir")
    printf "\nPushing latest changes for repository '%s'...\n" "$(tput bold)$repo_name$(tput sgr0)"

    # Push changes with a timeout of 10 seconds.
    output=$(timeout 10 git -C "$repo_dir" push 2>&1)
    exit_code=$?

    if [ $exit_code -eq 124 ]; then
        # Timeout occurred, use white bold on red background color.
        printf "\e[37;1;41mTimed out while pushing changes for repository '%s'\e[0m\n" "$repo_name"
    elif [ $exit_code -ne 0 ]; then
        printf "$(tput setaf 1)$(tput bold)%s$(tput sgr0)\n" "$output" \
            | sed 's/^/      /'
    else
        printf "$(tput setaf 2)%s$(tput sgr0)\n" "$output" \
            | sed 's/^/      /'
    fi

    # Display modified files in yellow bold.
    modified_files=$(git -C "$repo_dir" status --porcelain)
    if [[ -n "$modified_files" ]]; then
        while IFS= read -r line; do
            printf "$(tput setaf 3)$(tput bold)        %s$(tput sgr0)\n" "$line"
        done <<< "$modified_files"
    fi
done
