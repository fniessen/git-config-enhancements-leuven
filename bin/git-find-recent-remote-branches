#!/usr/bin/env bash

#? git-find-recent-branches, Time-stamp: 2024-09-19
#? Copyright (C) 2024 Fabrice Niessen
#?
#? License GPLv3+: GNU GPL version 3 or later <http://gnu.org/licenses/gpl.html>.
#? This is free software: you are free to change and redistribute it.
#? There is NO WARRANTY, to the extent permitted by law.

##? Usage: git-find-recent-branches [options]
##?
##? Find Git remote branches that have been modified recently.
##?
##? Options:
##?   --since=DATE                  specify the date from which to show branches
##?                                 [default: 1 week ago]
##?   -h, --help                    display this help and exit
##?   -V, --version                 display version information and exit
##?
##? Examples:
##?   git-find-recent-branches      find branches modified since last Friday
##?                                 or yesterday
##?   git-find-recent-branches --since="2 weeks ago"
##?                                 find branches modified since 2 weeks ago

# Set -uo pipefail for undefined variable check and pipeline failure propagation.
set -uo pipefail

# Check if 'docopts' command is available.
if ! command -v docopts > /dev/null 2>&1; then
    printf >&2 "Error: 'docopts' command not found.\n"
    exit 2
fi

# Extract help and version information from the script.
help=$(grep "^##?" "$0" | cut -c 5-)
version=$(grep "^#?" "$0" | cut -c 4-)

# Parse command-line arguments using docopts.
args="$(docopts -h "$help" -V "$version" : "$@")"
eval "$args"

# Set -e to exit on non-zero command status.
set -e

# Set the since date. Default to '1.week.ago' if not provided.
since=${since:-'1.week.ago'}

# Fetch latest changes and remote branches, pruning deleted branches.
git fetch --prune > /dev/null 2>&1

# Get the list of remote branches, exit gracefully if there are no branches.
branches=$(git for-each-ref --sort='-committerdate' --format='%(refname:short)' refs/remotes | grep -v HEAD || true)

if [[ -z "$branches" ]]; then
    printf >&2 "No remote branches found.\n"
    exit 2
fi

# Define color and formatting using 'tput'.
setup_colors() {
    RED=$(tput setaf 1)         # Red.
    GREEN=$(tput setaf 2)       # Green.
    BLUE=$(tput setaf 4)        # Blue.
    RESET=$(tput sgr0)          # Reset all attributes.
    BOLD=$(tput bold)           # Bold text.
}

# Initialize color and text formatting.
setup_colors

# Array to hold formatted branch details.
output=()

# Loop through each remote branch to check for recent modifications.
for branch in $branches; do
    # Capture the output of the git log command for the last commit
    # since the specified date for the current branch.
    commit_info=$(git log -1 --since="$since" "$branch" 2>/dev/null)

    # Check if the output contains at least one line (indicating a recent
    # commit).
    if [[ -n "$commit_info" ]]; then
        # Retrieve the date and author of the last commit on the branch.
        last_commit_info=$(git show -s --format='%ci %an' "$branch")
        last_commit_date=$(printf "%s" "$last_commit_info" | awk '{print $1}')
        last_commit_time=$(printf "%s" "$last_commit_info" | awk '{print $2}')
        author=$(printf "%s" "$last_commit_info" | awk '{$1=$2=$3=""; print $0}' | xargs)

        # Format the output for this branch and store it in an array.
        day_of_week=$(date -d "$last_commit_date" "+%a")
        last_commit_time=$(date -d "$last_commit_time" "+%H:%M")
        formatted_output=$(printf "$GREEN%s %s %s$RESET - Branch $BOLD$RED%s$RESET $BLUE<%s>$RESET\n" \
                                  "$last_commit_date" "$day_of_week" "$last_commit_time" "$branch" "$author")
        # Append to the output array.
        output+=("$formatted_output")
    fi
done

# Sort the collected output based on the date and time (in reverse).
printf "%s\n" "${output[@]}" | sort -r --key=1,1 --key=2,2 --key=3,3
