#!/usr/bin/env bash

# Find all Git branches that have changes affecting a specific file.

if [[ ! -f "$1" ]]; then
    echo "Usage: $0 <filename> [<base>]"
    exit 1
fi

filename="$1"
base="${2:-master}"

# Define tput formatting variables for reuse.
BOLD=$(tput bold)
RESET=$(tput sgr0)

echo "Searching for branches with changes to $filename related to the $base branch"

# We look through all the local branches using plumbing.
for branch in $(git for-each-ref --format='%(refname:short)' refs/heads/); do
    # We're establishing a shared ancestor between base and branch, to only find forward changes.
    merge_base=$(git merge-base $base $branch)
    # Check if there are any changes in a given path.
    changes=$(git diff $merge_base..$branch --stat -- $filename)

    if [[ ! -z $changes ]]; then
        echo "Changes in branch ${BOLD}$branch${RESET} | Merge Base: $merge_base"
        # Show change statistics pretty formatted.
        git diff $merge_base..$branch --stat -- $filename
    fi
done
