#!/usr/bin/env bash

# Default GitHub username and personal access token.
default_username="your_github_username"
default_token="your_github_personal_access_token"

# Check if jq is installed.
if ! command -v jq &> /dev/null; then
    printf >&2 "Error: jq is not installed. Please install it before running this script.\n"
    exit 2
fi

# Get GitHub username and personal access token from command-line arguments, or
# from a config file, or use default values.
if [[ "$#" -eq 2 ]]; then
    username="$1"
    token="$2"
elif [[ -f "$HOME/.secret/.github_config" ]]; then
    source "$HOME/.secret/.github_config"
elif [[ -f "$HOME/.github_config" ]]; then
    source "$HOME/.github_config"
else
    printf "No GitHub username and personal access token found. Using default values.\n"
    username="$default_username"
    token="$default_token"
fi

# Make API request to list your public repositories.
repos_response=$(curl -s -H "Authorization: token $token" "https://api.github.com/users/$username/repos?type=public&sort=updated")

# Check if curl request failed (e.g., due to network or authentication issues).
if [[ -z "$repos_response" ]]; then
    printf >&2 "Error: Unable to reach GitHub. Please check your internet connection or GitHub token.\n"
    exit 1
fi

# Check for an API error message.
api_error=$(echo "$repos_response" | jq -r '.message?')
if [[ "$api_error" != "null" ]]; then
    printf >&2 "Error from GitHub API: %s\n" "$api_error"
    exit 1
fi

# Extract the repository names from the response.
repos=$(echo "$repos_response" | jq -r '.[].name')

# Check if there are any repositories returned.
if [[ -z "$repos" ]]; then
    printf "No public repositories found for user %s.\n" "$username"
    exit 0
fi

# Loop through each repository and get its open issues.
for repo in $(echo "$repos" | sort); do
    repo_response=$(curl -s -H "Authorization: token $token" "https://api.github.com/repos/$username/$repo")

    # Check if the curl request to get repository details failed.
    if [[ -z "$repo_response" ]]; then
        printf >&2 "Error: Unable to fetch data for repo %s. Please check your connection.\n" "$repo"
        continue
    fi

    num_issues=$(echo "$repo_response" | jq '.open_issues')

    # Fetch the open issues for the repository.
    issues_response=$(curl -s -H "Authorization: token $token" "https://api.github.com/repos/$username/$repo/issues?state=open")

    # Check if the curl request to get issues failed.
    if [[ -z "$issues_response" ]]; then
        printf >&2 "Error: Unable to fetch issues for repo %s. Please check your connection.\n" "$repo"
        continue
    fi

    # Extract the list of issues (number and title).
    issues=$(echo "$issues_response" | jq -r '.[] | "  #" + (.number | tostring) + " - " + .title')

    # Only print repo and issue information if issues are present.
    if [[ "$issues" ]]; then
        printf "%s: %d open issues\n%s\n\n" "$repo" "$num_issues" "$issues"
    else
        printf "%s: No open issues\n\n" "$repo"
    fi
done
