# -*- mode: conf -*-
# .gitconfig, Time-stamp: 20240701.1132

[checkout]
    # Preserve timestamps of checked out files.
    preserveTimestamps = true

[user]
    # Override with your name and email in the file .gitconfig.
    name = John Doe
    email = john.doe@example.com

[github]
    # Override with your GitHub username in the file .gitconfig.
    user = jdoe

[fetch]
    # Remove remote-tracking references that no longer exist on the remote.
    prune = true

[init]
    # Set the default branch for new repositories to main.
    defaultBranch = main

[merge]
    # Show a three-way diff in case of conflicts.
    conflictstyle = diff3

[merge]
    # Use meld as the merge tool.
    tool = meld

[mergetool "meld"]
    # Run meld with the required arguments.
    cmd = meld --diff "$LOCAL" "$MERGED" "$REMOTE" --diff "$BASE" "$LOCAL" --diff "$BASE" "$REMOTE" --output "$MERGED"
    # cmd = meld --diff "$LOCAL" "$BASE" "$REMOTE" --diff "$BASE" "$LOCAL" --diff "$BASE" "$REMOTE" --output "$MERGED"
    # Don't keep backup files.
    keepBackup = false

[difftool]
    # Set prompt to false to avoid asking for confirmation before launching the diff tool.
    prompt = false

[diff]
    tool = meld

[difftool "meld"]
    # Set the command to launch "meld" with the two input files as arguments.
    cmd = meld "$LOCAL" "$REMOTE"

[core]
    # editor = notepad++.exe -multiInst -notabbar -nosession -noPlugin
    editor = sh -c 'command -v $GIT_EDITOR >/dev/null 2>&1 && exec $GIT_EDITOR || echo "Please install $GIT_EDITOR or set another editor"'
    editor = sh -c 'for cmd in emacsclient emacs notepad++; do command -v $cmd >/dev/null 2>&1 && exec $cmd; done; echo "No suitable editor found. Please install Emacs or Notepad++."'
    editor = sh -c 'for cmd in emacsclient emacs notepad++; do command -v $cmd >/dev/null 2>&1 && exec $cmd; done; echo "No suitable editor found. Please install Emacs or Notepad++."'
    editor = sh -c 'for cmd in emacsclient emacs notepad++; do command -v $cmd >/dev/null 2>&1 && exec $cmd && echo "Using $cmd as the editor."; done; echo "No suitable editor found. Please install Emacs or Notepad++."'
    editor = sh -c 'for cmd in emacsclient emacs; do command -v $cmd >/dev/null 2>&1 && exec $cmd && echo "Using $cmd as the editor." && break; done; echo "No suitable editor found. Please install Emacs or Notepad++."'
## XXX Ã€ tester:
    editor = sh -c 'command -v emacsclient >/dev/null 2>&1 && echo emacsclient || echo "No suitable editor found. Please install Emacs."'

    # Set Emacsclient as the default editor.
    editor = emacsclient -a emacs

    # Set Git pager to ignore ^M and use less with custom flags.
    # (git-grep to ignore ^M)
    pager = tr -d '\\r' | less -REX

    # Set whitespace configuration to only warn about carriage return at the end of the line.
    whitespace = cr-at-eol
    # whitespace = fix,-indent-with-non-tab,trailing-space,space-before-tab,cr-at-eol

    # Set Git pager to use less with custom flags and diff-so-fancy.
    pager = "!sh -c '~/bin/git-pager'"
    pager = "!f() { \
        if command -v diff-so-fancy &>/dev/null; then \
            echo 'Using diff-so-fancy pager' && diff-so-fancy | LESS=less --tabs=4 -FRX \"$@\"; \
        else \
            echo 'Using default pager' && LESS=less --tabs=4 -FRX \"$@\"; \
        fi; \
    }; f"
    pager = LESS= less --tabs=4 -FRX

[core]

    # Enable parallel filesystem operations.
    preloadindex = true

    # Enable file system caching to avoid UAC issues.
    fscache = true

[gc]
    # Optimize for repositories with many files.
    auto = 256

[help]
    # Enable autocorrect for mistyped commands.
    autocorrect = 1

[log]
    # Use short date format for log messages.
    date = short

    # Use short format for ref names (e.g. branch or tag names).
    decorate = short

[diff]
    # Treat file renames as copies.
    renames = copies

    # Set the limit of similarity for considering a file rename.
    renameLimit = 30000

    # Use the patience diff algorithm for generating patches.
    algorithm = patience

[diff "zebra"]
    # Use dimmed zebra coloring to highlight moved lines in a diff.
    colorMoved = dimmed_zebra

[diff "header"]
    # Include mnemonic prefixes in diff hunk headers.
    mnemonicprefix = true

    # Don't show any prefix in diff hunk headers.
    noprefix = true

[apply]
    # Don't detect whitespace errors when applying a patch.
    whitespace = nowarn

[status]
    submoduleSummary = true

[push]
    # Only push the current branch to its upstream branch.
    default = simple

[merge]
    # Show a diffstat of what changed in the merge.
    stat = true

    # Provide a summary of the merge, including affected files and commit messages.
    summary = true

    # Include summaries of merged commits in newly created merge commit messages.
    log = true

[rebase]
    # Enable the display of a diffstat when rebasing, showing what changed
    # during the rebase.
    stat = true

[grep]
    # Show line numbers in the results.
    lineNumber = true

    # # Allow extended regular expressions
    # extendedRegexp = true

    # Display the full path of matching files in the results.
    fullName = true

[color]
    ui = auto
    branch = auto
    diff = auto
    status = auto
    interactive = auto

[color "branch"]
    current = cyan bold
    local = green bold
    remote = red bold
    upstream = red bold
    plain = yellow reverse

[color "diff"]
    plain = "#888888"
    meta = 11
    frag = magenta bold
    func = "#cc99cc"
    old = red bold
    new = green bold
    commit = yellow
    whitespace = red reverse

[diff-so-fancy]
    useUnicodeRuler = true

[color "diff-highlight"]
    oldNormal = red bold
    oldHighlight = red bold 52
    newNormal = green bold
    newHighlight = green bold 22

[color "status"]
    header = normal
    added = green bold
    changed = yellow bold
    untracked = cyan
    branch = cyan bold
    nobranch = bold ul blink 12
    unmerged = red reverse bold

[color "grep"]
    context = "#888888"
    filename = yellow bold
    function = red
    linenumber = magenta bold
    match = green reverse bold
    matchContext = yellow reverse bold
    matchSelected = yellow bold blue
    separator = red bold
    selected = white

[format]
    pretty = format:%C(green)%ad%C(reset) %C(yellow)%h%C(auto)%d%C(reset) %s %C(blue)<%an>%C(reset)

# https://dev.to/megamattmiller/the-git-aliases-that-get-me-to-friday-1cmj
[custom.formats]
    ls = "[%C(auto,yellow)%<|(10)%h%C(reset)] [%C(auto,bold blue)%<(15trunc)%cn%C(reset)]  %C(auto)%d% C(reset)%s"
    find = "[%C(yellow)%<|(20)%h%C(reset)] [%C(bold blue)%<(10)%cn%C(reset)]  %C(auto)%d %C(reset)  %s"
    graph = "%C(bold blue)%h%C(reset) - %C(bold cyan)%aD%C(reset) %C(bold green)(%ar)%C(reset) %C(yellow)%d%C(reset)%n %C(white)%s%C(reset)%n %C(dim white)- %an <%ae> %C(reset) %C(dim white)(committer: %cn <%ce>)%C(reset)"

[alias]

    ##? Usage: git aliases
    ##?
    ##? List all Git aliases in alphabetical order.
    aliases = "!git config -l \
                  | grep alias \
                  | cut -c 7- \
                  | sort \
                  | sed 's_=_ = _'"

    work-profile = config user.email \"john@work.com\"

    ##? Usage: git whoami
    ##?
    ##? Display the current git user's name and email.
    whoami = "!f() { \
        local name=\"$(git config user.name)\"; \
        local email=\"$(git config user.email)\"; \
        printf '%s <%s>\n' \"$name\" \"$email\"; \
    }; f"

    ##? Usage: git init-repository
    ##?
    ##? Initialize a new Git repository with an initial commit.
    init-repository = "!f() { \
        git init \
            && if [ -z \"$(ls -A)\" ]; then \
                   touch .gitignore; \
               fi \
            && git add . \
            && git commit -m 'Initial commit'; \
    }; f"

    ##? Usage: git cl
    ##?
    ##? Clone a repository recursively, including all submodules.
    cl = clone --recursive

    ##? Usage: git origin
    ##?
    ##? Get the default remote name, defaulting to 'origin' if not set.
    origin = "!f() { \
        local default_remote=$(git config --get clone.defaultRemoteName); \
        printf \"%s\n\" \"${default_remote:-origin}\"; \
    }; f"
    ### git remote show
    ### git rev-parse --abbrev-ref @{u}
    ### git rev-parse --symbolic-full-name --abbrev-ref @{u} | sed 's!/! !g' | awk '{print $1}'

    ##? Usage: git repo-owner
    ##?
    ##? Get the owner of the repository from the remote URL.
    repo-owner = "!f() { \
        local remote_url=$(git config --get remote.$(git origin).url); \
        git remote show $remote_url -n \
            | grep 'Fetch URL:' \
            | sed -E 's_^.*[/:](.*)/.*$_\\1_' \
            | sed 's_\\.git$__'; \
    }; f"

    ##? Usage: git repo-slug-remote
    ##?
    ##? Get the repository slug from the remote URL.
    repo-slug-remote = "!f() { \
        local remote_url=$(git config --get remote.$(git origin).url); \
        git remote show $remote_url -n \
            | awk -F/ '/Fetch URL:/{print $NF}' \
            | sed 's_\\.git$__'; \
    }; f"

    ##? Usage: git repo-slug-local
    ##?
    ##? Get the repository slug from the local directory name.
    repo-slug-local = "!f() { \
        local repo_name=$(basename \"$(git root)\"); \
        printf \"%s\n\" \"$repo_name\"; \
    }; f"

    ##? Usage: git main-branch
    ##?
    ##? Get the name of the main branch, regardless of whether it is called 'main' or 'master'.
    main-branch = "!f() { \
        if git show-ref --verify --quiet refs/heads/main; then \
            printf 'main\n'; \
        else \
            printf 'master\n'; \
        fi \
    }; f"
    # Note: The alias
    # main-branch = "!git symbolic-ref refs/remotes/$(git origin)/HEAD \
    #     | sed 's_^refs/remotes/$(git origin)/__'"
    # generates the error message
    # "fatal: ref refs/remotes/origin/HEAD is not a symbolic ref"
    # when the remote repository does not have a default branch.
    ### git symbolic-ref --short refs/remotes/origin/$(git rev-parse --abbrev-ref @{u})

    ##? Usage: git search-for-files PATTERN
    ##?
    ##? List all files in the current branch matching a case-insensitive search pattern.
    ##?
    ##? Arguments:
    ##?   PATTERN                       Pattern
    search-for-files = "!f() { \
        if [ $# -ne 1 ]; then \
            printf >&2 'Usage: git search-for-files PATTERN\n'; \
            return 2; \
        fi; \
        local PATTERN=\"$1\"; \
        git ls-tree -r --name-only HEAD \
            | grep -i --color=auto \"$PATTERN\"; \
    }; f"

    ##? Alias for 'search-for-files'.
    find-files = search-for-files

    ##? Usage: git search-for-files-all-branches FILE_NAME
    ##?
    ##? Search for a specific file in all local branches.
    ##?
    ##? Arguments:
    ##?   FILE_NAME                     The name of the file to search for in
    ##?                                 all local branches.
    search-for-files-all-branches = "!f() { \
        if [ $# -ne 1 ]; then \
            printf >&2 'Usage: git search-for-files-all-branches FILE_NAME\n'; \
            return 2; \
        fi; \
        local FILE_NAME=\"$1\"; \
        git local-branches \
            | while read -r branch; do \
                  printf \"\n$(tput bold)$(tput setaf 2)$branch:$(tput sgr0)\n\"; \
                  git ls-tree -r --name-only \"$branch\" | \
                  nl -bn -w3 | \
                  grep --color=auto \"$FILE_NAME\"; \
              done; \
    }; f"

    ##? Alias for 'search-for-files-all-branches'.
    find-files-all-branches = search-for-files-all-branches

    # Usage: git search-for-code PATTERN [TREE]
    #
    ##? Perform a case-insensitive search for "pattern" in all tracked files,
    ##? displaying line numbers, context around matches, and file headers.
    ##?
    ##? Example:
    ##?   git search-for-code "pattern"
    search-for-code = "!git --no-pager grep -i -I --line-number --break --heading -C 1"

    # Alias for 'search-for-code'.
    ack = search-for-code

    search-for-code-in-extension = "XXX"

    # Usage: git git-search <search-term>
    # Search for a string in all Git-tracked files.
    grep-all = "!f() { \
        git rev-list --all \
          | xargs git grep \"$1\"; \
    }; f"
    # IN ALL COMMITS, NOT IN ALL BRANCHES???!!! LOTS OF DUPLICATES!!!

    # Usage: git gno PATTERN [TREE]
    # Search for a pattern in all tracked filenames, ignoring case and binary
    # files.
    gno = "grep -i -I --name-only"

    ##? Usage: git unmodify [FILE_TO_RESTORE]
    ##?
    ##? Undo local modifications for a specific file or all files if no file is
    ##? provided.
    ##?
    ##? Examples:
    ##?   git unmodify                  Restore all modified files.
    ##?   git unmodify .                Restore all modified files in the current directory.
    ##?   git unmodify PATH/TO/FILE     Restore a specific modified file:.
    unmodify = "!f() { \
        local FILE_TO_RESTORE=\"$1\"; \
        if [ -z \"$FILE_TO_RESTORE\" ]; then \
            git status --porcelain \
                | grep -E '^ M' \
                | sed 's_^ M __' \
                | xargs -I {} git checkout -- \"{}\"; \
        else \
            if git status --porcelain \"$FILE_TO_RESTORE\" | grep -qE '^ M'; then \
                git checkout -- \"$FILE_TO_RESTORE\"; \
            else \
                printf >&2 \"Error: File '%s' is not modified.\n\" \"$FILE_TO_RESTORE\"; \
                return 2; \
            fi; \
        fi; \
    }; f"

    ##? Usage: git undelete [FILE_TO_RESTORE]
    ##?
    ##? Restore deleted files for a specific file or all files if no file is
    ##? provided.
    ##?
    ##? Examples:
    ##?   git undelete                  Restore all deleted files.
    ##?   git undelete .                Restore all deleted files in the current directory.
    ##?   git undelete PATH/TO/FILE     Restore a specific deleted file.
    undelete = "!f() { \
        local FILE_TO_RESTORE=\"$1\"; \
        if [ -z \"$FILE_TO_RESTORE\" ]; then \
            git status --porcelain \
                | grep -E '^ D' \
                | sed 's_^ D __' \
                | xargs -I {} git checkout -- \"{}\"; \
        else \
            if git status --porcelain \"$FILE_TO_RESTORE\" | grep -qE '^ D'; then \
                git checkout -- \"$FILE_TO_RESTORE\"; \
            else \
                printf >&2 \"Error: File '%s' is not deleted.\n\" \"$FILE_TO_RESTORE\"; \
                return 2; \
            fi; \
        fi; \
    }; f"

    # Usage: git unstage [FILENAME...]
    # Unstage the changes to a file that were previously added to the Git
    # staging area.
    unstage = reset HEAD --

    # Usage: git staged-files
    # List files that are staged (added, modified, or deleted) and ready to be committed.
    staged-files = diff --cached --name-only

    # Usage: git added-files
    # List files that have been added but not yet committed.
    added-files = diff --cached --name-only --diff-filter=A

    # Usage: git modified-files
    # List files that have been modified in the working tree.
    modified-files = diff --name-only --diff-filter=M

    # Usage: git deleted-files
    # List files that have been deleted in the working directory.
    deleted-files = ls-files --deleted

    ##? Usage: git all-untracked-files
    ##?
    ##? List all untracked files.
    all-untracked-files = ls-files --others

    # Usage: git backup-all-untracked-files
    # Create a backup archive of all untracked files in the repository.
    backup-all-untracked-files = "!f() { \
        local repo_slug_remote=\"$(git repo-slug-remote)\"; \
        local current_date=$(date +'%Y-%m-%d'); \
        local backup_filename=\"$repo_slug_remote-$current_date-untracked.zip\"; \
        git all-untracked-files -z \
            | xargs -0 tar rvf ~/$backup_filename; \
    }; f"

    ##? Usage: git untracked-files-excluding-ignored
    ##?
    ##? List untracked files, excluding Git-ignored files.
    untracked-files-excluding-ignored = ls-files --others --exclude-standard

    ##? Usage: git ignored-files
    ##?
    ##? List ignored files.
    ignored-files = ls-files --others --ignored --exclude-standard

    # Usage: git tracked-files
    # List all tracked files in the repository, sorted by last modification time.
    tracked-files = ls-files -t

    # Usage: git check-file-status FILENAME
    # Check the status of a file (tracked, not tracked, or does not exist).
    check-file-status = "!f() { \
        if [ -e \"$1\" ]; then \
            if git ls-files --error-unmatch \"$1\" >/dev/null 2>&1; then \
                printf \"$1: tracked\n\"; \
            else \
                printf \"$1: not tracked\n\"; \
            fi; \
        else \
            printf \"$1: does not exist\n\"; \
        fi; \
    }; f"

    # Add file or pattern to .gitignore.
    ignore = "!f() { \
        if [ ! -e .gitignore ]; then \
            touch .gitignore; \
        fi; \
        echo \"$1\" >> .gitignore; \
    }; f"

    # Ignore all untracked files by adding them to .gitignore.
    ignore-untracked = "!git status \
                | grep -P \"^\\t\" \
                | grep -vF .gitignore \
                | sed \"s_^\\t__\" \
                >> \"${GIT_PREFIX}.gitignore\""

    # Mark a file as unchanged and hide it from the Git status.
    skip = update-index --assume-unchanged

    # Revert the hidden status of a file, allowing it to be tracked again by Git.
    unskip = update-index --no-assume-unchanged

    # Mark all changed files as unchanged and hides them from the Git status.
    skip-all = "!git status -s \
                | awk {'print $2'} \
                | xargs git skip"

    # Revert the hidden status of all files, allowing them to be tracked again by Git.
    unskip-all = "!git skipped \
                | xargs git update-index --no-assume-unchanged"

    # List files marked as "assume unchanged" in the Git repository.
    skipped = "!git ls-files -v \
                | grep '^h' \
                | cut -c 3-"

    # Usage: git clean-untracked
    # Remove all untracked files and directories (that are not ignored by Git).
    clean-untracked = clean -f -d -X
    # THIS COMMAND MAY DELETE FILES THAT CANNOT BE RECOVERED.

    # Usage: git clean-untracked-dry
    # Show what files and directories would be removed by the clean-untracked
    # alias without actually removing them.
    clean-untracked-dry = clean -n -d -X

    # Usage: git clean-all
    # Delete all untracked files and directories, including those that are
    # ignored by Git.
    clean-all = clean -f -d -x
    # THIS COMMAND MAY DELETE FILES THAT CANNOT BE RECOVERED.

    # Usage: git clean-all-dry
    # Show what files and directories would be removed by the clean-all alias
    # without actually removing them.
    clean-all-dry = clean -n -d -x

    # Remove files marked as deleted in the Git repository.
    remove-deleted = "!f() { \
        git status \
            | grep deleted \
            | sed 's_deleted:__g' \
            | sed 's_[#| ]__g' \
            | sed 's/^[ \t]*//' \
            | sed 's/[ \t]*$//' \
            | xargs -d '\n' git rm; \
    }; f"

    # Usage: git stash-push
    # Stash changes in the working directory for later retrieval.
    stash-push = stash push

    # Usage: git stash-all
    # Stage all changes and untracked files, then creates a stash.
    stash-all = !git add -A \
                && git stash

    # Usage: git stash-untracked
    # Stash changes, including untracked files, for later retrieval.
    stash-untracked = stash push --include-untracked

    # Usage: git snapshot
    # Create a snapshot stash with a timestamp and immediately apply it.
    snapshot = !git stash push -m "snapshot-$(date +'%Y%m%d_%H%M')" \
                && git stash apply "stash@{0}"

    # Usage: git checkpoint
    # Create a new temporary stash with a timestamp and restore staged changes.
    checkpoint = !git stash push -m "$(date +%F--%T)" \
                && git stash pop --index

    # Usage: git checkpoint-recover [TIME_INTERVAL]
    # Display a formatted log of recent version changes with timestamps and commit messages.
    # Example: git checkpoint-recover 1week
    checkpoint-recover = "!f() { \
        git fsck \
            | grep commit \
            | cut -d' ' -f3 \
            | while read HASH; do \
                  git rev-parse --verify --no-revs --quiet $HASH^2 2>/dev/null \
                      && echo $HASH \
                      | xargs git rev-list --since=${1:-1day} -1; \
              done \
            | xargs -L 1 git log -1 --format=%at:%h \
            | sort \
            | cut -f2 -d: \
            | xargs -L 1 git log -3 --format='%Cblue%h %Cgreen(%ar) %Creset%s' --graph; \
    }; f"

    ##? Usage: git stashes
    ##?
    ##? List stashes with their short creation dates, or output "Nothing stashed" to stderr if none.
    stashes = "!f() { \
        stash_list=\"$(git stash list --date=short)\"; \
        if [ -z \"$stash_list\" ]; then \
            printf 'Nothing stashed\n'; \
        fi; \
        printf '%s' \"$stash_list\n\"; \
    }; f"

    # Usage: git stash-view
    # Show the changes introduced by the latest stash in a unified diff format.
    stash-view = stash show -p
    # Instead of unshelving the changes, show the diff that would result from
    # unshelving.

    ##? Usage: git stash-show STASH_NAME
    ##?
    ##? Show the contents of a specified stash in patch format.
    stash-show = "!f() { \
        git stash show stash^{/$@} -p; \
    }; f"

    stash-shno = stash show --name-only

    # Usage: git stash-apply [STASH_INDEX]
    # Apply a specific stash to the working directory.
    stash-apply = "!f() { \
        if [ -z \"$1\" ]; then \
            git stash apply; \
        else \
            git stash apply stash@{\"$1\"}; \
        fi \
    }; f"
    # Apply changes but don't delete them.

    # Find stash with name like text.
    stash-apply = "!f() { \
        git stash apply stash^{/$@}; \
    }; f"

    stash-apply = "!f() { \
        git stash apply stash^{/$*}; \
    }; f"

    # Revert the changes introduced by the most recent stash.
    stash-revert = !git stash show -p --no-textconv --binary \
                | git apply -R

    # Usage: git find-stash-id [SEARCH_STRING]
    # Find the stash ID by searching stash descriptions for a specific string.
    find-stash-id = "!f() { \
        git stash list \
            | grep $@ \
            | head -n 1 \
            | sed -n 's_stash@{\\(.*\\)}.*_\\1_p'; \
    }; f"
    # Only accepts single word, no quotations.

    # Usage: git pop-stash [STASH_INDEX_OR_ID]
    # Appliy and remove the specified stash by index or ID.
    stash-pop = "!f() { \
        git stash pop stash@{$(git find-stash-id $@)}; \
    }; f"

    # Usage: git unstash [STASH_INDEX]
    # Apply the most recent stash and removes it from the stash stack.
    # Apply and remove a specific stash from the stash stack.
    unstash = "!f() { \
        if [ -z \"$1\" ]; then \
            git stash pop; \
        else \
            git stash pop stash@{\"$1\"}; \
        fi \
    }; f"

    # Usage: git stash-remove [STASH_INDEX]
    # Remove a specific stash from the stash stack without applying changes.
    stash-remove = stash drop

    # Usage: git stashes-clear
    # Remove all stashes from the stash stack.
    stashes-clear = "!git stash list \
                          | cut -d: -f1 \
                          | xargs -r -I {} git stash-remove {}"

    # Usage: git ci -m "MESSAGE"
    # Alias for 'commit'.
    ci = commit

[commit]
    template = ~/.git_commit_template.txt

[alias]

    # Usage: git last-commit-hash
    # Show abbreviated hash of the last commit.
    # Examples:
    #   git last-commit-hash          find hash of last commit
    #   git last-commit-hash develop  find hash of last commit in develop
    last-commit-hash = log -1 --pretty=format:'%h'

    # Usage: git changed-files [COMMIT_HASH]
    # Show all files modified in each commit, including merge commits.
    # Examples:
    #   git changed-files             List files modified in last commit
    #   git changed-files bada55      List files modified in the commit with hash 'bada55'
    changed-files = "!f() { \
        local COMMIT_HASH=${1:-HEAD}; \
        git diff --name-only $COMMIT_HASH^..$COMMIT_HASH; \
    }; f"

    # Usage: git download-email-patch
    # Generate a patch file for the current branch using the git format-patch command.
    download-email-patch = "!f() { \
        local current_branch=$(git current-branch); \
        git format-patch $current_branch.patch; \
    }; f"

    # Usage: git download-commit-plain-diff [COMMIT_HASH]
    # Create a diff file for the changes in a commit or range of commits.
    download-commit-plain-diff = "!f() { \
        local COMMIT_HASH=${1:-HEAD}; \
        git diff $COMMIT_HASH^..$COMMIT_HASH > ${1:-HEAD}.diff; \
    }; f"

    # Show changes with word-level granularity and color highlighting.
    show-words = show --color-words

    ##? Usage: git difftool-parent [COMMIT_HASH]
    ##?
    ##? Launch difftool for changes between specified commit and its parent.
    difftool-parent = "!f() { \
        local COMMIT_HASH=${1:-HEAD}; \
        git difftool $COMMIT_HASH^..$COMMIT_HASH; \
    }; f"

    ##? Usage: git ediff-commit COMMIT_HASH FILE_PATH
    ##?
    ##? Compare FILE_PATH between the current version and COMMIT_HASH using
    ##? Emacs' ediff.
    ediff-commit = "!f() { \
        local COMMIT_HASH=\"$1\"; \
        local FILE_PATH=\"$2\"; \
        local current_file=\"$FILE_PATH\"; \
        git show ${COMMIT_HASH}:\"$FILE_PATH\" > /tmp/ediff-temp-${COMMIT_HASH}; \
        emacs --eval \"(ediff-files \\\"$current_file\\\" \\\"/tmp/ediff-temp-${COMMIT_HASH}\\\")\"; \
        rm /tmp/ediff-temp-${COMMIT_HASH}; \
    }; f"

    ##? Usage: git difftool-last-modified FILE_PATH
    ##?
    ##? Compare the current version of FILE_PATH with its state in the last
    ##? commit that modified it, using difftool.
    difftool-last-modified = "!f() { \
        local FILE_PATH=\"$1\"; \
        local last_modified_commit_hash=$(git rev-list -1 HEAD -- \"$FILE_PATH\"); \
        git difftool \"$last_modified_commit_hash\"^ -- \"$FILE_PATH\"; \
    }; f"

    # Usage: git dir-diff
    # Open Meld with directory comparison for all modified files.
    dir-diff = difftool -t meld --dir-diff

    ##? Usage: git branches-containing COMMIT_HASH
    ##?
    ##? List branches containing a specific commit.
    branches-containing = "!f() { \
        if [ $# -ne 1 ]; then \
            printf >&2 'Usage: git branches-containing COMMIT_HASH\n'; \
            return 2; \
        fi; \
        local COMMIT_HASH=\"$1\"; \
        git branch --contains \"$COMMIT_HASH\" --all; \
    }; f"

    ##? Usage: git tags-containing COMMIT_HASH
    ##?
    ##? List tags containing a specific commit.
    tags-containing = "!f() { \
        if [ $# -ne 1 ]; then \
            printf >&2 'Usage: git tags-containing COMMIT_HASH\n'; \
            return 2; \
        fi; \
        local COMMIT_HASH=\"$1\"; \
        git tag -l --contains \"$COMMIT_HASH\" \
            | sort -r; \
    }; f"

    ##? Usage: git is-ancestor COMMIT1 COMMIT2
    ##?
    ##? Check if the first commit is an ancestor of the second commit.
    ##?
    ##? Arguments:
    ##?   COMMIT1                       The first commit to check for ancestry
    ##?   COMMIT2                       The second commit to check for ancestry
    is-ancestor = "!f() { \
        if [ \"$#\" -ne 2 ]; then \
            printf >&2 'Usage: git is-ancestor COMMIT1 COMMIT2\n'; \
            exit 2; \
        fi; \
        local COMMIT1=\"$1\"; \
        local COMMIT2=\"$2\"; \
        git merge-base --is-ancestor \"$COMMIT1\" \"$COMMIT2\"; \
    }; f"

    # Search through all commit logs for multiple patterns (case-insensitive)
    # across all branches.
    # Example: git search-commit-messages-or-logic-all-branches "pattern1" "pattern2" "pattern3"
    # See also git search-commit-messages-or-logic PATTERN... (for current branch!!!)
    search-commit-messages-or-logic-all-branches = "!f() { \
        if [ $# -eq 0 ]; then \
            printf >&2 'Error: No search pattern provided\n'; \
            return 2; \
        fi; \
        git log --all -i $(printf -- '--grep=%s ' \"$@\"); \
    }; f"

    # Usage: git search-commit-messages-or-logic PATTERN...
    #
    # Search for commit messages that match any of the provided patterns (OR logic, like in BitBucket).
    #
    # This will search commit messages for the provided patterns and list the
    # matching commits.
    # (FOR CURRENT BRANCH ONLY!!!)
    search-commit-messages-or-logic = "!f() { \
        if [ \"$#\" -eq 0 ]; then \
            printf >&2 'Usage: git search-commit-messages-or-logic PATTERN...\n'; \
            return 2; \
        fi; \
        for PATTERN in \"$@\"; do \
            git log --grep=\"$PATTERN\" -i --format=\"%at:%C(green)%ad%C(reset) %C(yellow)%h%C(auto)%d%C(reset) %s %C(bold blue)<%an>%C(reset)\" --color=always; \
            printf \"\n\"; \
        done | sort -r | sed 's/^[^:]*://'; \
    }; f"
    # XXX Add all, date short...

    # Usage: git search-commit-messages-and-logic PATTERN...
    #
    # Search for commits that match all provided patterns in commit messages (AND logic, like in Gitlab).
    #
    # This will search commit messages for the provided patterns and list the
    # matching commits.
    # (FOR CURRENT BRANCH ONLY!!!)
    search-commit-messages-and-logic = "!f() { \
        if [ \"$#\" -eq 0 ]; then \
            printf >&2 'Usage: git search-commit-messages-and-logic PATTERN...\n'; \
            return 2; \
        fi; \
        CMD=\"git log --all-match -i --format='%at:%C(green)%ad%C(reset) %C(yellow)%h%C(auto)%d%C(reset) %s %C(bold blue)<%an>%C(reset)' --color=always\"; \
        for PATTERN in \"$@\"; do \
            CMD=\"$CMD --grep='$PATTERN'\"; \
        done; \
        eval $CMD | sort -r | sed 's/^[^:]*://'; \
    }; f"

    # Usage: git commits-by [AUTHOR]
    # Show commit history for a specific author.
    # Examples:
    #   git commits-by                Show commits by the current user.
    #   git commits-by "Author Name"  Show commits by a specific author.
    #   git commits-by "author@example.com"
    #                                 Show commits by a specific author.
    commits-by = "!f() { \
        local AUTHOR=\"${1:-$(git config --get user.email)}\"; \
        git log --author=\"$AUTHOR\" -i --no-merges --all; \
    }; f"

    ##? Usage: git search-commit-diffs-all-branches "search_string"
    ##?
    ##? Search for changes containing a specific string across all branches.
    search-commit-diffs-all-branches = "!f() { \
        git log --all -S \"$1\"; \
    }; f"

    # Usage: git search-all-commits SEARCH_TERM
    search-all-commits = "!f() { \
        if [ $# -ne 1 ]; then \
            printf >&2 'Usage: git search-all-commits SEARCH_TERM\n'; \
            return 2; \
        fi; \
        local SEARCH_TERM=\"$1\"; \
        git rev-list --all | xargs git grep -F \"$SEARCH_TERM\"; \
    }; f"

    # Usage: git show-commits-for-string STRING FILENAME
    # Show commits that add or remove a specific string in a file.
    # Example: git show-commits-for-string CLOSED '*.java'
    show-commits-for-string = "!sh -c 'git log -p -S \"$1\" \"$2\"' -"

    browse-commits = "!f() { \
        local URL=$(git config --get remote.$(git origin).url); \
        xdg-open ${URL/.git}/commits; \
    }; f"

    # Append the staged changes to the last commit, reusing its message.
    amend-reuse = "!f() { \
        if git rev-parse @{u} >/dev/null 2>&1; then \
            local upstream=$(git rev-parse @{u}); \
            local local=$(git rev-parse @); \
            if [ $upstream = $local ]; then \
                git commit -v --amend --reuse-message HEAD; \
            else \
                printf >&2 'Error: The commit has already been pushed to the remote repository.\n'; \
                return 2; \
            fi; \
        else \
            git commit -v --amend --reuse-message HEAD; \
        fi; \
    }; f"

    # Usage: git amend-message "NEW_COMMIT_MESSAGE"
    # Amend the last commit with a new message.
    amend-message = "!f() { \
        if git rev-parse @{u} >/dev/null 2>&1; then \
            local upstream=$(git rev-parse @{u}); \
            local local=$(git rev-parse @); \
            if [ $upstream = $local ]; then \
                git commit --amend -m \"$1\"; \
            else \
                printf >&2 'Error: The commit has already been pushed to the remote repository.\n'; \
                return 2; \
            fi; \
        else \
            git commit --amend -m \"$1\"; \
        fi; \
    }; f"

    # Alias for 'amend-message'.
    reword = amend-message

    ##? Usage: git amend-author NAME EMAIL
    ##?
    ##? Amend the last commit with a new author and reuse the commit message,
    ##? only if the commit has not been pushed.
    amend-author = "!f() { \
        if [ $# -ne 2 ]; then \
            printf >&2 'Usage: git amend-author NAME EMAIL\n'; \
            return 2; \
        fi; \
        local NAME=\"$1\"; \
        local EMAIL=\"$2\"; \
        if git rev-parse @{u} >/dev/null 2>&1; then \
            local upstream=$(git rev-parse @{u}); \
            local local=$(git rev-parse @); \
            if [ $upstream = $local ]; then \
                git commit --amend --author=\"$NAME <$EMAIL>\" --reuse-message HEAD; \
            else \
                printf >&2 'Error: The commit has already been pushed to the remote repository.\n'; \
                return 2; \
            fi; \
        else \
            printf >&2 'Error: No upstream branch set. Cannot determine push status.\n'; \
            return 2; \
        fi; \
    }; f"

    # Edit history.
    recommit2 = "!f() { \
        local TARGET=$(git rev-parse \"$1\"); \
        git commit --fixup=$TARGET ${@:2} \
            && GIT_EDITOR=true git rebase --interactive --autostash --autosquash $TARGET~; \
    }; f"
    # See https://blog.filippo.io/git-fixup-amending-an-older-commit/

    # Checkout the commit in question, and amend its message.
    reword2 = "!f() { \
        local current_branch=$(git current-branch); \
        git checkout \"$1\"; \
        git commit --amend; \
        git checkout $current_branch; \
    }; f"

    # Usage: git uncommit
    # Undo the most recent commit and keep the changes staged for commit again.
    uncommit = reset --soft HEAD~1

    # Usage: git uncommit-unstage
    # Undo the most recent commit and keep the changes made in the commit as
    # unstaged changes in the working directory.
    uncommit-unstage = reset --mixed HEAD~1

    # Usage: git undo
    # Undo the most recent commit and delete any changes made to the code since
    # then.
    undo = reset --hard HEAD~1

    # Usage: git squash NUMBER_OF_COMMITS_TO_UNDO
    # Create a new commit that combines the changes introduced by a specified
    # number of previous commits into a single commit.
    squash = "!f() { \
        if [ $# -ne 1 ]; then \
            printf >&2 'Usage: git squash NUMBER_OF_COMMITS_TO_UNDO\n'; \
            return 2; \
        fi; \
        local num_commits_to_undo=$1; \
        local upstream_branch=$(git upstream-branch 2>/dev/null); \
        if [ -z \"$upstream_branch\" ]; then \
            printf >&2 'Warning: No upstream branch configured for the current branch.\n'; \
            printf >&2 'Consider using 'squash-force' alias.\n'; \
            return 2; \
        fi; \
        local num_unpushed=$(git rev-list $upstream_branch..HEAD --count); \
        if [ $num_commits_to_undo -le $num_unpushed ]; then \
            git squash-force $num_commits_to_undo; \
        else \
            printf >&2 'Error: Cannot squash %d commits. There are only %d unpushed commits.\n' \
                   $num_commits_to_undo $num_unpushed; \
            return 2; \
        fi; \
    }; f"

    # Usage: git squash-force NUMBER_OF_COMMITS_TO_UNDO
    # Create a new commit that combines the changes introduced by a specified
    # number of previous commits without safety checks.
    squash-force = "!f() { \
        git reset --soft HEAD~$1 \
            && git commit --edit -m\"$(git log --reverse --format=%B HEAD..HEAD@{1})\"; \
    }; f"

    # Interactively rebase a specified number of recent commits.
    ireb = "!f() { \
        git rebase -i HEAD~\"$1\"; \
    }; f"

    # Interactively rebase all commits that haven't been pushed to the upstream
    # branch.
    work-in-progress = rebase -i @{u}

    create-branch = checkout -b

    ##? Usage: git current-branch
    ##?
    ##? Get the current branch name.
    current-branch = "!f() { \
        branch_name=\"$(git branch --show-current 2>/dev/null)\"; \
        if [ -z \"$branch_name\" ]; then \
            printf >&2 'Unable to determine current branch.\n'; \
            return 2; \
        fi; \
        printf '%s\n' \"$branch_name\"; \
    }; f"
    # Note: This is the most recent (v2.22+) and recommended way to get the
    # current branch name.
    # The alternative methods
    #     current-branch = rev-parse --abbrev-ref HEAD
    # and
    #     current-branch = symbolic-ref --short HEAD 2>/dev/null
    # are less readable, less convenient and less user-friendly.

    ##? Usage: git convert-current-branch-name
    ##?
    ##? Convert the current branch name by replacing slashes with hyphens.
    convert-current-branch-name = "!f() { \
        git current-branch \
            | tr '/' '-'; \
    }; f"

    ##? Usage: git publish-branch [REMOTE]
    ##?
    ##? Push the current branch to a remote repository and set upstream.
    publish-branch = "!f() { \
        local REMOTE=${1:-$(git origin); }; \
        local branch=$(git current-branch); \
        git push -u $REMOTE $branch; \
    }; f"

    ##? Usage: git upstream-branch
    ##?
    ##? Get the upstream branch name.
    upstream-branch = rev-parse --abbrev-ref @{u}

    # Usage: git branches
    # Show all branches with their corresponding upstream branches and commit hashes.
    branches = "!git fetch --prune && git branch -a -vv"

    ##? Usage: git local-branches
    ##?
    ##? List and display local branches.
    local-branches = "!git rev-parse --symbolic --branches"
    # Note: The alternative methods
    # local-branches = "!git for-each-ref --format='%(refname:short)' refs/heads/"
    # or
    # local-branches = "!git for-each-ref refs/heads --format='%(refname:short)'"
    # are slower.

    # Usage: git verify-local-branch BRANCH_NAME
    # Verify if a local branch exists.
    verify-local-branch = "!f() { \
        if [ $# -ne 1 ]; then \
            printf >&2 'Usage: git verify-local-branch BRANCH_NAME\n'; \
            return 2; \
        fi; \
        local BRANCH_NAME=\"$1\"; \
        git rev-parse --verify \"$BRANCH_NAME\" >/dev/null 2>&1; \
    }; f"

    # Usage: git verify-remote-branch BRANCH_NAME
    # Check if a remote branch exists.
    verify-remote-branch = "!f() { \
        if [ $# -ne 1 ]; then \
            printf >&2 'Usage: git verify-remote-branch BRANCH_NAME\n'; \
            return 2; \
        fi; \
        local BRANCH_NAME=\"$1\"; \
        git rev-parse --verify \"$(git origin)/$BRANCH_NAME\" >/dev/null 2>&1; \
    }; f"

    # Usage: git br
    # Show detailed information about local branches, sorted by commit date.
    br = for-each-ref refs/heads \
                --sort=-committerdate \
                --format='%(color:green)%(committerdate:short)%(color:reset) %(HEAD) %(color:green bold)%(refname:short)%(color:reset) %(color:red bold)%(upstream:track)%(color:reset) %(color:yellow)%(objectname:short)%(color:reset) %(contents:subject) %(color:blue)<%(authorname)>%(color:reset)'

    # Usage: git remote-branches
    # List remote branches sorted by most recent commit.
    remote-branches = "!f() { \
        git fetch --prune && \
        for branch in $(git for-each-ref --format='%(refname:short)' refs/remotes | grep -v HEAD); do \
            printf \"%s\\t%s\n\" \"$(git show -s --format='%Cred%ci %C(green)%h %C(yellow)%cr %C(magenta)%an %C(blue)' $branch | head -n 1)\" \"$branch\"; \
        done | sort -r; \
    }; f"

    # Iterate over remote branches, show commit info and branch name, and sort
    # by date.
    remote-branches-with-commit-info = "!f() { \
        git fetch --prune && \
        for branch in $(git branch -r | grep -v HEAD); do \
            echo $(git show --name-only --pretty=\"[%ai] [%ar] [%an] [%h]\" $branch | head -n 1) [${branch}]; \
        done | sort -r; \
    }; f"

    # Usage: git branch-edit-desc BRANCH
    # Edit the description of a Git branch.
    branch-edit-desc = "!f() { \
        if [ -z \"$1\" ]; then \
            printf >&2 \"Usage: git branch-edit-desc BRANCH\n\"; \
            return 2; \
        fi; \
        local BRANCH=\"$1\"; \
        description_file=\".git/refs/heads/$BRANCH.description\"; \
        mkdir -p \"$(dirname \"$description_file\")\"; \
        touch \"$description_file\"; \
        echo -n \"\" > \"$description_file\"; \
        \"${VISUAL:-${EDITOR:-emacs}}\" \"$description_file\"; \
        cat \"$description_file\" | git hash-object -w --stdin > \"$description_file.hash\"; \
        git update-ref refs/heads/\"$BRANCH.description\" \"$(cat \"$description_file.hash\")\"; \
        git branch --edit-description \"$BRANCH\"; \
        rm \"$description_file\"; \
        rm \"$description_file.hash\"; \
    }; f"

    # Usage: git branch-show-desc BRANCH
    # Show the description of a Git branch.
    branch-show-desc = "!f() { \
        if [ -z \"$1\" ]; then \
            printf >&2 \"Usage: git branch-show-desc BRANCH\n\"; \
            return 2; \
        fi; \
        local BRANCH=\"$1\"; \
        git config --get branch.\"$BRANCH\".description; \
    }; f"

    # Usage: git branch-upstream
    # List local branches and their upstream branches.
    branch-upstream = for-each-ref --format='%(refname:short) <- %(upstream:short)' refs/heads

    # Usage: git my-branches
    # Show all local branches created by the current user.
    my-branches = !git for-each-ref --format='%(authorname) %(refname:short)' refs/heads | grep -E \"^$(git config --get user.name)\"

    br-active = "!f() { \
        git branch --no-merged \
            | grep -v '\\*'; \
    }; f"

    # Usage: git branches-active
    # Show only branches that are unmerged.
    branches-active = "!f() { \
        git branch -a -vv --no-merged \
            | grep -v '\\*'; \
    }; f"

    # Usage: git br-merged
    # List branches merged into the current branch, excluding the current branch itself.
    br-merged = "!f() { \
        git branch --merged $(git current-branch) \
            | grep -v \"^\\*\"; \
    }; f"

    # Usage: git branches-merged
    # List merged branches (including remote branches), excluding the current branch.
    branches-merged = "!f() { \
        git branch -a -vv --merged \
            | grep -v '\\*'; \
    }; f"

    main = checkout main
    master = "!f() { \
        git checkout $(git main-branch); \
    }; f"
    develop = checkout develop

    ##? Usage: git sync-main
    ##?
    ##? Update remote branches and merge changes from the main branch into the
    ##? current branch.
    sync-main = "!f() { \
        git fetch; \
        local main_branch=$(git main-branch); \
        local current_branch=$(git current-branch); \
        git merge $(git origin)/$main_branch; \
        local merge_status=$?; \
        if [ $merge_status -eq 0 ]; then \
            printf \"\\033[1mBranch synced:\\033[0m '%s' successfully synced with '%s'\\n\" \"$current_branch\" \"$main_branch\"; \
        else \
            git merge --abort 2>/dev/null; \
            printf >&2 \"\\033[1mUnable to sync branch:\\033[0m You can't merge until you resolve all merge conflicts.\\n\"; \
            return 2; \
        fi \
    }; f"

    # Fetch and rebase the current local branch onto the latest changes from the remote "main" branch.
    sync-main-rebase = !git fetch \
                && git rebase $(git origin)/$(git main-branch)

    ##? Perform a verbose pull operation.
    pull = pull -v

    ##? Usage: git pull-autostash
    ##?
    ##? Auto-stash changes (if needed), pull with rebase, and restore stashed
    ##? changes (onto the current branch).
    pull-autostash = pull --rebase --autostash

    ##? Auto-stash changes (including untracked files if any), pull with rebase,
    ##? and restore stashed changes (if any).
    pull-autostash-include-untracked = "!f() { \
        local changes=$(git status --porcelain); \
        if [ -n \"$changes\" ]; then \
            git stash push --include-untracked -m 'autostash'; \
            git pull --rebase; \
            # Check for conflicts before popping the stash. \
            if ! git diff --quiet && ! git diff --cached --quiet; then \
                printf >&2 \"\\033[1mStash application would result in conflicts. Resolve conflicts manually.\\033[0m\\n\"; \
                git reset --hard; # Reset working directory to avoid accidental commit. \
                return 1; \
            fi; \
            git stash pop; \
        else \
            git pull --rebase; \
        fi; \
    }; f"

    # Update remote-tracking branches and rebase the current local branch onto
    # the upstream branch it tracks.
    ##? Fetch changes from upstream and rebase current branch preserving merges.
    sync-upstream-rebase = "!f() { \
        git fetch; \
        git rebase -p @{u}; \
    }; f"
    # Rebasing non-linear changes (when the fast-forward merge is not possible).

    # Usage: git sync-ff-upstream
    # Update local branch with fast-forward from upstream.
    sync-upstream-ff = "!f() { \
        git fetch; \
        git merge --ff-only @{u}; \
    }; f"
    # (Keep your local branch in sync with the remote branch without creating
    # merge commits.)

    ##? Usage: git has-new-commits BRANCH_NAME
    ##?
    ##? Check if a branch has new commits.
    ##?
    ##? Arguments:
    ##?   BRANCH_NAME                   The name of the branch to check.
    has-new-commits = "!f() { \
        local BRANCH_NAME=\"$1\"; \
        if [ -z \"$BRANCH_NAME\" ]; then \
            echo \"Error: Please provide a branch name as a parameter.\"; \
            exit 1; \
        fi; \
        [ $(git rev-list --count $(git origin)/\"$BRANCH_NAME\"..\"$BRANCH_NAME\") -gt 0 ]; \
    }; f"

    # Iteratively synchronize all local branches with their corresponding remote branches using fast-forward merges.
    update-all-branches = "!f() { \
        local current_branch=$(git current-branch); \
        local local_branches=$(git local-branches); \
        for branch in $local_branches; do \
            if [ \"$branch\" != \"$current_branch\" ]; then \
                printf 'Switching to branch: \\e[1m%s\\e[0m\n' \"$branch\"; \
                git checkout $branch; \
                if git check-remote-branch \"$branch\"; then \
                    if git has-new-commits $branch; then \
                        if git pull --ff-only; then \
                            printf 'Successfully updated %s\n' \"$branch\"; \
                        else \
                            printf 'Failed to update %s. Please resolve any conflicts manually.\n' \"$branch\"; \
                        fi; \
                    else \
                        printf 'No new commits to fetch for %s\n' \"$branch\"; \
                    fi; \
                else \
                    printf \"Remote branch \\e[1m%s\\e[0m does not exist. Skipping update.\n\n\" \"$branch\"; \
                fi; \
                printf '\n'; \
            fi; \
        done; \
        git checkout $current_branch; \
    }; f"

    ##? Usage: git update-all-branches2
    ##?
    ##? Update all local branches with their remote counterparts, checking for conflicts before updating.
    update-all-branches2 = "!f() { \
        local local_branches=$(git local-branches); \
        for branch in $local_branches; do \
            printf \"Checking for conflicts in \\e[1m%s\\e[0m...\n\" \"$branch\"; \
            if git check-remote-branch \"$branch\"; then \
                if git is-ancestor $(git origin)/$branch $branch; then \
                    printf \"No conflicts found in \\e[1m%s\\e[0m. Updating...\n\" \"$branch\"; \
                    if git pull $(git origin) $branch:$branch; then \
                        printf \"\n\"; \
                    else \
                        printf \"\\e[91mError: Pull failed for branch '%s'.\\e[0m\n\" \"$branch\"; \
                        if git rebase --abort > /dev/null 2>&1; then \
                            printf \"Rebase operation aborted.\n\n\"; \
                        else \
                            printf \"\\e[91mCould not abort the rebase operation. Please do so manually.\\e[0m\n\"; \
                        fi; \
                        continue; \
                    fi; \
                else \
                    printf \"Potential conflicts found in \\e[1m%s\\e[0m. Skipping update.\n\n\" \"$branch\"; \
                fi; \
            else \
                printf \"Remote branch \\e[1m%s\\e[0m does not exist. Skipping update.\n\n\" \"$branch\"; \
            fi; \
        done \
    }; f"

    ##? Delete the specified local branch.
    delete-local-branch = branch -d

    # Delete local branches that are fully merged into the specified branch,
    # excluding master, main, and develop.
    delete-merged-branches = "!f() { \
        local base_branch=$(git main-branch); \
        local target_branch=${1-$base_branch}; \
        git branch --merged \"$target_branch\" \
            | grep -v \"^\\s*$target_branch$\" \
            | grep -Ev '^(\\s*)(master|main|develop)$' \
            | xargs git delete-local-branch; \
    }; f"

    # Delete branches safely merged into the main branch, skipping main and *
    # (current) branches.
    cleanup-branches = !git branch --merged $(git main-branch) \
                            | grep -vE '^\\* | $(git main-branch)$' \
                            | xargs -r git delete-local-branch
    # On OSX, 'xargs' does not have '-r' argument, so it fail. If you remove
    # '-r', it will run at least once, making this not safe operation.

    # Usage: git delete-remote-branch BRANCH_NAME
    # Delete a remote branch.
    delete-remote-branch = "!f() { \
        local BRANCH_NAME=\"$1\"; \
        printf \"Are you sure you want to delete the remote branch '%s'? [y/N]\" \"$BRANCH_NAME\"; \
        read -r confirm; \
        if [ \"$confirm\" = \"y\" ] || [ \"$confirm\" = \"Y\" ]; then \
            git push $(git origin) --delete \"$BRANCH_NAME\"; \
        else \
            printf \"Branch deletion cancelled.\"; \
        fi \
    }; f"
    # = "Close source branch" (after merging).

    # Usage: git unpublish
    # Delete the current branch from the remote repository.
    unpublish = !git delete-remote-branch $(git current-branch)

    delete-branch = "!f() { \
        git delete-local-branch \"$1\" \
            && git delete-remote-branch \"$1\"; \
    }; f"

    # Usage: git prune-branches-all-remotes
    # Prune all branches for all remotes.
    prune-branches-all-remotes = "!f() { \
        git remote | xargs -n 1 git remote prune; \
    }; f"
    # 'git remote prune' does not understand '--all'.

    ##? Usage: git delete-gone-branches
    ##?
    ##? Delete local branches that are tracking remote branches that are gone.
    delete-gone-branches = "!f() { \
        local gone_branches=$(git branch -vv | grep \": gone]\" | awk \"{print $1}\"); \
        if [ -n \"$gone_branches\" ]; then \
            printf \"Deleting gone branches:\n\"; \
            printf \"%s\n\" \"$gone_branches\" | xargs git delete-local-branch; \
        else \
            printf \"No gone branches to delete.\n\"; \
        fi \
    }; f"

    # Usage: git rename-local-branch [OLD_BRANCH_NAME] NEW_BRANCH_NAME
    # Rename a local branch.
    rename-local-branch = branch -m

    # Usage: git rename-branch OLD_BRANCH_NAME NEW_BRANCH_NAME
    # Rename both a local and remote branch.
    rename-branch = "!f() { \
        git rename-local-branch \"$1\" $2 \
            && git push --set-upstream $(git origin) $2 \
            && git delete-remote-branch \"$1\"; \
    }; f"

    # Usage: git tag-with-date [SUFFIX]
    # Tag the current commit with the current date and a custom suffix.
    tag-with-date = "!sh -c 'git tag $(date +'%Y.%m.%d_%H.%M')_\"$0\"'"

    ##? Usage: git publish-tag TAG_NAME [REMOTE_NAME]
    ##?
    ##? Publish a Git tag to a remote repository.
    publish-tag = "!f() { \
        local TAG_NAME=$1; \
        local REMOTE_NAME=${2:-$(git origin)}; \
        git push $REMOTE_NAME refs/tags/$TAG_NAME; \
    }; f"

    ##? Usage: git unpublish-tag TAG_NAME [REMOTE_NAME]
    ##?
    ##? Remove a published Git tag from a remote repository.
    unpublish-tag = "!f() { \
        local TAG_NAME=$1; \
        local REMOTE_NAME=${2:-$(git origin)}; \
        git push $REMOTE_NAME :refs/tags/$TAG_NAME; \
    }; f"

    push-tags = push --tags

    # List tags.
    tags = tag -l --sort=v:refname

    # Show a list of tag names and the commits they reference.
    tags-show-ids = show-ref --tags

    last-tag = describe --tags --abbrev=0

    last-tag-all = !git describe --tags $(git rev-list --tags --max-count=1)

    # Usage: git rename-tag OLD_TAG_NAME NEW_TAG_NAME
    # Rename a tag (locally and remotely).
    rename-tag = "!f() { \
        git tag $2 \"$1\"; \
        git tag -d \"$1\"; \
        git push $(git origin) $2; \
        git push $(git origin) :refs/tags/\"$1\"; \
    }; f"

    # Delete local and remote tags.
    delete-tag = "!f() { \
        [ -z \"$1\" ] \
            && echo \"No tags given as an argument!\" \
            || (git tag -l \"$1\" | \
                xargs -I % echo \"git tag -d % \
                               && git push --delete $(git origin) %\" | \
                sh); \
    }; f"

    ##? Usage: git compare-commits FROM TO
    ##?
    ##? Show commits between two branches or commits.
    ##?
    ##? Example:
    ##?   git compare-commits branch1 branch2
    compare-commits = "!f() { \
        if [ \"$#\" -ne 2 ]; then \
            printf >&2 'Usage: git compare-commits FROM TO\n'; \
            return 2; \
        fi; \
        local FROM=\"$1\"; \
        local TO=\"$2\"; \
        git log \"$FROM\"...\"$TO\"; \
    }; f"

    ##? Usage: git compare-changed-files FROM TO
    ##?
    ##? Show changed files between two branches or commits.
    ##?
    ##? Example:
    ##?   git compare-changed-files branch1 branch2
    compare-changed-files = "!f() { \
        if [ \"$#\" -ne 2 ]; then \
            printf >&2 'Usage: git compare-changed-files FROM TO\n'; \
            return 2; \
        fi; \
        local FROM=\"$1\"; \
        local TO=\"$2\"; \
        git diff --stat \"$FROM\"...\"$TO\"; \
    }; f"

    ##? Usage: git compare FROM TO
    ##?      = git diff FROM...TO
    ##?
    ##? Show diff between two branches or commits.
    ##?
    ##? Examples:
    ##?   git compare branch1 branch2
    ##?   git compare master@{1day} master
    compare = "!f() { \
        if [ \"$#\" -ne 2 ]; then \
            printf >&2 'Usage: git compare FROM TO\n'; \
            return 2; \
        fi; \
        local FROM=\"$1\"; \
        local TO=\"$2\"; \
        git diff \"$FROM\"...\"$TO\"; \
    }; f"
    # https://github.com/fniessen/git-leuven/compare/master@%7B1day%7D...master

    compare-file-main = "!f() { \
        git diff $(git main-branch)..$(git current-branch) -- \"$1\"; \
    }; f"

    compare-file-main-difftool = "!f() { \
        git difftool $(git main-branch)..$(git rev-parse --abbrev-ref HEAD) -- \"$1\"; \
    }; f"

    # Usage: git missing [OTHER_BRANCH]
    # Show the missing commits between the current branch and another branch.
    missing = "!f() { \
        local current_branch=$(git current-branch); \
        local OTHER_BRANCH=${1:-$(git main-branch)}; \
        if ! git verify-local-branch \"$current_branch\"; then \
            printf >&2 \"Error: Current branch '%s' is not a valid branch.\n\" \"$current_branch\"; \
            return 2; \
        fi; \
        if ! git verify-local-branch \"$OTHER_BRANCH\"; then \
            printf >&2 \"Error: Other branch '%s' is not a valid branch.\n\" \"$OTHER_BRANCH\"; \
            return 2; \
        fi; \
        local commits_missing_to_current=$(git rev-list --count \"$OTHER_BRANCH\"..\"$current_branch\"); \
        local commits_missing_to_other=$(git rev-list --count \"$current_branch\"..\"$OTHER_BRANCH\"); \
        printf \"$(tput bold)Commits missing in '%s' but present in '%s':$(tput sgr0) %d commits\n\" \
            \"$OTHER_BRANCH\" \"$current_branch\" \"$commits_missing_to_current\"; \
        git --no-pager log \"$OTHER_BRANCH\"..\"$current_branch\"; \
        printf \"\n\n$(tput bold)Commits missing in '%s' but present in '%s':$(tput sgr0) %d commits\n\" \
            \"$current_branch\" \"$OTHER_BRANCH\" \"$commits_missing_to_other\"; \
        git --no-pager log \"$current_branch\"..\"$OTHER_BRANCH\"; \
        printf \"\n\"; \
    }; f"

    ##? Get the merge base commit hash between two branches. Defaults to main
    ##? and current branch if not specified.
    common-ancestor = "!f() { \
        local MAIN_BRANCH=${1:-$(git main-branch)}; \
        local CURRENT_BRANCH=${2:-$(git rev-parse --abbrev-ref HEAD)}; \
        local base=$(git merge-base $MAIN_BRANCH $CURRENT_BRANCH 2>/dev/null); \
        if [ -z \"$base\" ]; then \
            printf >&2 '%s\n' \"Error: Unable to find common ancestor between branches '$MAIN_BRANCH' and '$CURRENT_BRANCH'. Branches may not exist or be valid.\"; \
            return 2; \
        else \
            local short_base=$(git rev-parse --short $base); \
            printf '%s\n' \"$short_base\"; \
        fi \
    }; f"
    # Find the point at which a branch forked from another branch (when it was
    # branched off).
    # Find the most recent common ancestor between the current branch and the
    # default branch.
    # BUG: Does not work between 2 specific branches -- well without arguments

    # Log commits from the common ancestor of current branch and HEAD.
    log-common-ancestor = log $(git common-ancestor)..

    # Show diff from the common ancestor of current branch and HEAD.
    diff-common-ancestor = diff $(git common-ancestor)..

    # Usage: git missing-files [OTHER_BRANCH]
    # Show the changed files that are in the current branch but not in the other (i.e., asymmetrical diff).
    # Examples:
    #   git missing-files             list changed files between this and main
    #   git missing-files feature/7   list changed files between this and the 'feature/7' branch
    missing-files = "!f() { \
        local current_branch=$(git current-branch); \
        local OTHER_BRANCH=${1:-$(git main-branch)}; \
        if ! git verify-local-branch \"$current_branch\"; then \
            printf >&2 \"Error: Current branch '%s' is not a valid branch.\n\" \"$current_branch\"; \
            return 2; \
        fi; \
        if ! git verify-local-branch \"$OTHER_BRANCH\"; then \
            printf >&2 \"Error: Other branch '%s' is not a valid branch.\n\" \"$OTHER_BRANCH\"; \
            return 2; \
        fi; \
        local missing_files_to_current=$(git diff --name-only \"$OTHER_BRANCH\"...\"$current_branch\" | wc -l | tr -d '[:space:]'); \
        printf \"$(tput bold)Files missing in '%s' but present in '%s':$(tput sgr0) %d files\n\" \"$OTHER_BRANCH\" \"$current_branch\" \"$missing_files_to_current\"; \
        git diff --stat \"$OTHER_BRANCH\"...\"$current_branch\"; \
    }; f"

    missing-files-name-only = "!f() { \
        local current_branch=$(git current-branch); \
        local OTHER_BRANCH=${1:-$(git main-branch)}; \
        if ! git verify-local-branch \"$current_branch\"; then \
            printf >&2 \"Error: Current branch '%s' is not a valid branch.\n\" \"$current_branch\"; \
            return 2; \
        fi; \
        if ! git verify-local-branch \"$OTHER_BRANCH\"; then \
            printf >&2 \"Error: Other branch '%s' is not a valid branch.\n\" \"$OTHER_BRANCH\"; \
            return 2; \
        fi; \
        git diff --name-only \"$OTHER_BRANCH\"...\"$current_branch\"; \
    }; f"

    ##? Usage: git log-graph
    ##?
    ##? Show a graphical log of commits.
    log-graph = log --graph

    ##? Usage: git log-graph-branches-tags-remotes
    ##?
    ##? Show a graphical log of commits with branches, tags, and remotes.
    log-graph-branches-tags-remotes = log --branches --tags --remotes --date-order --format=format:'%C(yellow)%h %C(reset) %<(75,trunc)%s <%cn> (%cr) %C(red)%d' --graph

    ##? Usage: git log-graph-all
    ##?
    ##? Show a graphical log of all references.
    log-graph-all-branches = log --all --graph

    ##? Usage: git log-graph-detail
    ##?
    ##? Show a detailed graphical log with file changes.
    log-graph-detail = log --pretty=format:'%C(green)%cr%C(reset) %C(yellow)%h%Creset %C(yellow)%d%Creset %s %C(bold blue)<%an>%Creset%n' --graph --name-status

    ##? Usage: git releases
    ##?
    ##? Display a simplified commit history graph with decorations, excluding
    ##? merge commits.
    releases = log --no-merges --all --simplify-by-decoration --graph

    # Draw Git revisions graph with Graphviz.
    graphviz = "!f() { \
        echo 'digraph git {' ; \
        git log -25 --pretty='format:  %h -> { %p }' \"$@\" \
            | sed 's_[0-9a-f][0-9a-f]*_\"&\"_g' ; \
        echo '}'; \
    }; f"

    # Display a list of authors with their email addresses and commit counts,
    # sorted by number of commits.
    authors = shortlog -n -s -e --no-merges --

    # Alias for 'authors'.
    contributors = authors

    pull-request-bb = "!f() { \
        local USER_NAME=\"$1\"; \
        curl --user $USER_NAME https://bitbucket.org/$(git repo-owner)/$(git repo-slug-remote)/pull-requests/new?source=$(git current-branch)&t=1; \
    }; f"

    pr-list = XXX

    # For GitHub.
    pr-checkout-gh = "!f() { \
        git fetch $(git origin) pull/\"$1\"/head:pr/\"$1\" \
            && git checkout pr/\"$1\"; \
    }; f"
    # https://help.github.com/en/github/collaborating-with-issues-and-pull-requests/checking-out-pull-requests-locally

    # For GitLab.
    pr-checkout-gl = "!f() { \
        git fetch $(git origin) merge-requests/\"$1\"/head:pr/\"$1\" \
            && git checkout pr/\"$1\"; \
    }; f"
    # https://about.gitlab.com/blog/2016/12/08/git-tips-and-tricks/#add-an-alias-to-checkout-merge-requests-locally

    # For GitHub.
    mpr = "!f() { \
        declare current_branch=\"$(git current-branch)\"; \
        declare BRANCH=\"${2:-$current_branch}\"; \
        if [ $(printf \"%s\" \"$1\" | grep '^[0-9]\\+$' > /dev/null; printf $?) -eq 0 ]; then \
            git fetch $(git origin) refs/pull/\"$1\"/head:pr/\"$1\" \
                && git checkout -B $BRANCH \
                && git rebase $BRANCH pr/\"$1\" \
                && git checkout -B $BRANCH \
                && git merge --ff-only pr/\"$1\" \
                && git delete-local-branch pr/\"$1\"; \
        fi \
    }; f"

    # Merge given pull request into the current branch.
    # The commit message will have the same for as if done using the
    # merge button on github.com
    # Example:
    #   git merge-pr $(git origin) 5
    merge-pr = "!sh -c '\
        local USER_AND_REPO=$(git remote show $1 | grep \"Fetch URL:\" | sed -E \"s/.*github.com[:\\/]([a-zA-Z_\\-]+)\\/([a-zA-Z_\\-]+)\\.git$/\\1 \\2/\"); \
        local USER=$(echo $USER_AND_REPO | cut -d\" \" -f1); \
        local REPO=$(echo $USER_AND_REPO | cut -d\" \" -f2); \
        local TMP_FILE=$(mktemp); \
        curl -si https://api.github.com/repos/$USER/$REPO/pulls/$2 > $TMP_FILE; \
        local PULL_AUTHOR=$(cat $TMP_FILE | awk \"{if (/ *\\\"head\\\"/) head=\\\\$1; if (/ *\\\"login\\\": \\\"/) value=\\\\$2}{if (head && value) print value; if (head && value) exit}\" | sed -E \"s/\\\"([^\\\"]+)\\\".*/\\1/\"); \
        local PULL_REF=$(cat $TMP_FILE | awk \"{if (/ *\\\"head\\\"/) head=\\\\$1; if (/ *\\\"ref\\\": \\\"/) label=\\\\$2}{if (head && label) print label; if (head && label) exit}\" | sed -E \"s/\\\"([^\\\"]+)\\\".*/\\1/\"); \
        local PULL_TITLE=$(cat $TMP_FILE | grep \"\\\"title\\\": \" | sed \"s/^ *\\\"title\\\": \\\"//\" | sed \"s/\\\",$//\"); \
        rm $TMP_FILE; \
        git fetch $1 pull/$2/head; \
        git merge --no-ff -m \"Merged pull request #$2 from $PULL_AUTHOR/$PULL_REF\n\n$PULL_TITLE\" FETCH_HEAD; \
        ' -"

    pr-clean = "!f() { \
        git delete-local-branch pr/\"$1\"; \
    }; f"

    pr-show = XXX <pr-number>

    related-pr-of-commit = "!sh -c 'git log --merges --ancestry-path $1..master \
                | tail -n 1 ' -"

    ##? Usage: git release-tag VERSION
    ##?
    ##? Create a tagged release version in Git and push it to the remote repository.
    release-tag = "!f() { \
        if [ $# -ne 1 ]; then \
            printf >&2 'Usage: git release-tag VERSION\n'; \
            return 2; \
        fi; \
        local VERSION=\"$1\"; \
        git tag -a v\"$VERSION\" -m \"Release version $VERSION\" \
            && git push --tags \
            && git push; \
    }; f"

    # Usage: git manifest
    # Print a list of version controlled files for the current revision.
    manifest = ls-files

    # Usage: git changelog [FIRST_TAG_NAME] [LAST_TAG_NAME] XXX
    # Detailed list of changes.
    changelog1 = "!f() { \
        git log --no-merges ${1-$(git last-tag)}..$2; \
    }; f"
    changelog = !sh -c 'git log --no-merges --pretty=format:\"* %s\" $(git last-tag)...' -
    changelog-org = !sh -c 'git log --no-merges --pretty=format:\"- %s\" $(git last-tag)...' -

    # le dernier tag, ainsi que la liste des commits ayant eu lieu depuis sur la
    # branche courante.
    unreleased = !git log $(git last-tag)...HEAD \
                && git last-tag

    ##? Get the tag that points to the current HEAD.
    current-tag = tag --points-at HEAD

    ##? Archive the current tag as a zip file.
    archive-current-tag = "!f() { \
        local tag=$(git current-tag); \
        git archive --format=zip --output=${tag}.zip HEAD; \
    }; f"

    ##? Usage: git export-branch-diff
    ##?
    ##? Export the current branch to a diff file.
    export-branch-diff = "!f() { \
        local current_branch=$(git current-branch); \
        git format-patch --stdout $current_branch > $current_branch.diff; \
    }; f"

    ##? Usage: git export-changed-files
    ##?
    ##? Export and zip changed files from the current branch compared to the main branch.
    export-changed-files = "!f() { \
        local current_branch=$(git convert-current-branch-name); \
        local main_branch=$(git main-branch); \
        local changed_files=$(git diff --name-only \"$main_branch\"...\"$current_branch\"); \
        if [ -z \"$changed_files\" ]; then \
            printf >&2 'No changed files to export.\n'; \
            return 2; \
        fi; \
        local date=$(date +'%Y-%m-%d'); \
        local zip_file=\"$date-$(git repo-slug-remote)-changed-files-$current_branch.zip\"; \
        zip -9 ~/$zip_file $changed_files; \
        printf 'Exported changed files saved as %s\n' $zip_file; \
    }; f"

    # Archive the current state to a zip file named latest.zip.
    archive-zip = archive --output=latest.zip

    # Archive the current state to a compressed tar.gz file named latest.tar.gz with maximum compression.
    archive-targz = archive --output=latest.tar.gz -9

    ##? Usage: git export-commit-files [COMMIT_HASH]
    ##?
    ##? Export changed files from a commit or HEAD and create a zip archive.
    export-commit-files = "!f() { \
        local COMMIT_HASH=${1:-HEAD}; \
        local current_branch=$(git convert-current-branch-name); \
        local zip_file_name=$(git repo-slug-remote)-commit-${branch_name}-${COMMIT_HASH}.zip; \
        git changed-files \"$COMMIT_HASH\" | tr '\n' '\\0' | xargs -0 zip -9 \"$zip_file_name\"; \
    }; f"
    ## XXX If HEAD, convert to commit hash.

    # View raw commit.
    email-patch = XXX git format-patch $(git convert-current-branch-name).patch

    # Since oldest ancestor...
    plain-diff = !git branch-diff > $(git convert-current-branch-name).diff

    patch-for-this = "!git diff -p $(git hash-object -t tree /dev/null)"

    ##? Check for whitespace errors between the current working directory and the
    ##? HEAD commit.
    check-whitespace-head = diff-tree --check $(git hash-object -t tree /dev/null) HEAD

    ##? Check for whitespace errors between the index (staging area) and the
    ##? current working directory.
    check-whitespace-index = diff --check $(git hash-object -t tree /dev/null)

    ##? Check for whitespace errors in the changes.
    whitespace-errors = diff --check

    # Check if any file in repo has windows line endings
    # Currently do not work as alias, works from comand line directly. There is a problem with \r
    check-eol = grep --files-with-matches $'\\r' HEAD

rsync-deploy =

# Deploy a branch to review server (https://review-feature-1.example.com).
deploy-review =

# Deploy master to staging server (https://staging.example.com).
deploy-staging =

# Deploy master to production server (https://example.com).
deploy-prod =

  # # Deploy
  # staging = !git push heroku-staging $(git current-branch):master -f && git track 'Deployed to staging ' # push current branch to staging, can add more comments after
  # dev = !git push heroku-dev $(git current-branch):master -f && git track 'Deployed to dev ' # push current branch to dev
  # deploy = !git push heroku $(git current-branch):master -f && git track 'Deployed to production ' # push current branch to production

# shipit = push heroku master

 # deploy='git push production master && terminal-notifier-notify -title "Deploy" -message "Deploy complete"'
 # stage='git push staging $(git current-branch):master'

# title
# description
# assignee
# kind
# priority
    create-issue = XXX

    create-issue-pull-request = XXX

    # issues = "!f() { \
    #     local USER_NAME=\"$1\"; \
    #     curl --user $USER_NAME \
    #         https://api.bitbucket.org/2.0/repositories/$(git repo-owner)/$(git repo-slug-remote)/issues \
    #         | jq -C --compact-output '.values | .[] | [.id, .title, .type, .priority, .state, .votes, .assignee.display_name, .created_on, .updated_on]' \
    #         | sed -r 's_(....)-(..)-(..)T(..):(..):(..).(............)_\\1-\\2-\\3_g' \
    #         | sed \"s_new_NEW_\" \
    #         | sed \"s_NEW_$(tput setaf 2) -- NOUVEAU -- $(tput sgr0)_\" \
    #         | sed \"s_NEW_\$(tput setaf 3) -NOUV- \$(tput sgr0)_\" \
    #         | sed \"s_open_OPEN_\" \
    #         | sed \"s_closed_CLOSED_\"; \
    # }; f"
# --data-urlencode 'priority >= \"major\"'

    issues-open = !git issues | grep "open"

    issues-assigned-to-me = !git issues | grep "$(git config --get user.name)"

    # Usage: git show-issue ISSUE_NUMBER
    show-issue = "!f() { \
        REPO_OWNER=\"YourUsername\"; \
        REPO_SLUG_REMOTE=\"YourRepository\"; \
        local ISSUE_NUMBER=\"$1\"; \
        URL=\"https://github.com/$REPO_OWNER/$REPO_SLUG_REMOTE/issues/$ISSUE_NUMBER\"; \
        open \"$URL\"; \
    }; f"

    browse-issues = "!f() { \
        local url=$(git config --get remote.$(git origin).url); \
        xdg-open ${url/.git}/issues/\"$1\"; \
    }; f"

    # List JIRA issue keys from commit messages.
    issue-keys = "!f() { \
        echo 'Printing JIRA issue keys'; \
        git log \"$@\" \
            | egrep -o '[A-Z]+-[0-9]+' \
            | sort -u; \
    }; f"

    browse-wiki = "!f() { \
        local url=$(git config --get remote.$(git origin).url); \
        xdg-open ${url/.git}/wiki; \
    }; f"

    # Put everything in the current repo in a Zip archive.
    download-repository = "!f() { \
        git archive ${1:-HEAD} --format=zip --output=$(basename $(git root))-commit-$(git rev-parse ${1:-HEAD}).zip; \
    }; f"
# XXX Test it with tag or branch.

    ##? Usage: git all-repos COMMAND [ARGS]
    ##?
    ##? Run a Git command for each repository in the current directory and its
    ##? subdirectories.
    ##?
    ##? Arguments:
    ##?   COMMAND                       Git command to be executed in each
    ##?                                 repository
    ##?   ARGS                          Additional arguments to be passed to the
    ##?                                 Git command
    all-repos = "!f() { \
        if [ $# -lt 1 ]; then \
            printf >&2 'Usage: git all-repos COMMAND [ARGS]\n'; \
            return 2; \
        fi; \
        local repo_slug_local; \
        find . -type d -name '.git' \
            | sed 's_/.git__' \
            | while read -r repo_path; do \
                repo_slug_local=$(git -C $repo_path repo-slug-local); \
                printf '\\033[1m%s\\033[0m\n' \"$repo_slug_local\"; \
                git -C $repo_path -c color.status=always \"$@\" 2>&1; \
                printf '\n\n'; \
            done; \
    }; f"

    # Usage: git pull-all-repos
    # Pull the changes in all Git repositories of the current directory.
    pull-all-repos = !$HOME/bin/git-pull-all-repos

    # Usage: git push-all-repos
    # Push the changes in all Git repositories of the current directory.
    push-all-repos = !$HOME/bin/git-push-all-repos

    # Execute shell command and show output.
    x = "!exec "

    ##? Usage: git st
    ##?
    ##? Show the status in short format with branch info.
    st = status -s -b

    ##? Usage: git diff-stat [FILE]
    ##?
    ##? Show changes with statistics (between working directory and index) if
    ##? there are any.
    ##?
    ##? Examples:
    ##?   git diff-stat                 Show differences for all files.
    ##?   git diff-stat file.txt        Show differences only for "file.txt".
    diff-stat = "!f() { \
        git diff-index --quiet HEAD -- || clear; \
        git diff --patch-with-stat; \
    }; f"

    ##? Usage: git diff-commits-ago NUMBER [FILE]
    ##?
    ##? Show diff (with stats) between HEAD and the state `NUMBER' commits ago.
    ##? Optionally, specify a FILE to show differences for a specific file.
    ##?
    ##? Examples:
    ##?   git diff-commits-ago 2        Show differences between HEAD and
    ##?                                 2 commits ago for all files.
    ##?   git diff-commits-ago 2 file.txt
    ##?                                 Show differences for "file.txt" between
    ##?                                 HEAD and 2 commits ago.
    diff-commits-ago = "!f() { \
        if [ $# -lt 1 ] || [ $# -gt 2 ]; then \
            printf >&2 'Usage: git diff-commits-ago NUMBER [FILE]\n'; \
            return 2; \
        fi; \
        if [ $# -eq 2 ]; then \
            git diff --patch-with-stat HEAD~$1 -- \"$2\"; \
        else \
            git diff --patch-with-stat HEAD~$1; \
        fi; \
        git diff-index --quiet HEAD -- || clear; \
    }; f"

    # Ignore whitespace when comparing the same lines. This indicates empty
    # lines added or deleted.
    diff-ignore-whitespace = diff -w

    # Diff line-wise.
    df = diff

    # Diff word-wise.
    dw = diff --color-words

    # Configure git-diff to produce the absolutely most minimal diff possible.
    dw-min = diff -w --word-diff-regex=. --color-words -U0

    # Show minimal differences in changes between working directory and the most recent commit, ignoring whitespace.
    wdiff = diff --diff-algorithm=minimal -w

    # Diff staged line-wise.
    df-staged = diff --cached

    # Diff staged word-wise.
    dw-staged = diff --color-words --cached

    # Show minimal differences in changes between staged changes and the most recent commit, ignoring whitespace.
    swdiff = diff --diff-algorithm=minimal -w --cached

    stage-modified-removed-files = add -u

    # Usage: git ls
    # Print a summary of activity.  Alias for 'log'.
    ls = log

    ll = log --pretty=medium --abbrev-commit --stat

    # Usage: git last
    # Return the last commit on the current branch.
    last = log -1 --stat

    # Usage: git lastn [N]
    # Show the last N commits on the current branch.
    lastn = "!f() { \
        git show --name-only $(git rev-list -${1:-1} HEAD); \
    }; f"

    # lastn2 = "!f() { \
    #     git log -${1:-1} --stat $(git rev-list -${1:-1} HEAD); \
    # }; f"

    ##? Usage: git file-history FILE_PATH
    ##?
    ##? Show the commit history of a specific file or directory.
    file-history = "!f() { \
        if [ $# -ne 1 ]; then \
            printf >&2 'Usage: git file-history FILE_PATH\n'; \
            return 2; \
        fi; \
        local FILE_PATH=\"$1\"; \
        if ! git ls-tree -r HEAD --name-only | grep -q \"^$FILE_PATH$\"; then \
            printf >&2 \"\\e[33mWarning: File '%s' not found in the current branch of the repository.\\e[0m\n\" \"$FILE_PATH\"; \
        fi; \
        git log --follow -- \"$FILE_PATH\"; \
    }; f"

    # Usage: git file-history-follow-copy-without-merge-commits FILENAME
    # Show commit history with file copies and renames.
    file-history-follow-copy-without-merge-commits = log --follow --date-order -C
    # ... BUT WITHOUT MERGE COMMITS

    # Usage: git file-history-follow-copy FILENAME
    # Show commit history of a file, including copies, renames, and merges.
    file-history-follow-copy = log --follow --date-order -C --find-renames --merges

    ##? Usage: git file-history-all FILE_PATH
    ##?
    ##? Show the commit history of a specific file or directory across all branches.
    file-history-all = "!f() { \
        if [ $# -ne 1 ]; then \
            printf >&2 'Usage: git file-history-all FILE_PATH\n'; \
            return 2; \
        fi; \
        local FILE_PATH=\"$1\"; \
        if ! git ls-tree -r HEAD --name-only | grep -q \"^$FILE_PATH$\"; then \
            printf >&2 \"\\e[33mWarning: File '%s' not found in the current branch of the repository.\\e[0m\n\" \"$FILE_PATH\"; \
        fi; \
        git log --follow --all -- \"$FILE_PATH\"; \
    }; f"

    ##? Usage: git related-history FILE_PATH
    ##?
    ##? Show all commits that modified a specific file, including the commit message and file list.
    ##?
    ##? Note:
    ##?   "rename from" files are not included in the output of this command.
    related-history = "!f() { \
        local FILE_PATH=\"$1\"; \
        if [ ! -e \"$FILE_PATH\" ]; then \
            printf >&2 \"Error: File '%s' not found in the working tree.\n\" \"$FILE_PATH\"; \
            return 2; \
        fi; \
        git show --name-only $(git rev-list HEAD -- \"$FILE_PATH\"); \
    }; f"

    # DEBUG version:
    # related-files = "!f() { \
    #     if [ ! -e \"$1\" ]; then \
    #         echo \"Error: File '$1' not found in the working tree.\"; \
    #         return 2; \
    #     fi; \
    #     local hashes=$(git --no-pager log --format=format:%H -- \"$1\"); \
    #     echo \"\nHashes: \n$hashes\"; \
    #     local files=$(echo \"$hashes\" | xargs -I % sh -c 'echo \"Processing hash: %\" && git diff-tree --no-commit-id --name-only -r % && echo \"\";'); \
    #     echo \"\nFiles: \n$files\"; \
    #     local sorted_files=$(echo \"$files\" | sort); \
    #     echo \"\nSorted Files: \n$sorted_files\"; \
    #     local unique_files=$(echo \"$sorted_files\" | uniq -c | sort -b -n -r); \
    #     echo \"\nUnique Files: \n$unique_files\"; \
    # }; f"

    ##? Usage: git related-files FILE_PATH
    ##?
    ##? Generate a list of which files changed together with a file.
    related-files = "!f() { \
        if [ $# -ne 1 ]; then \
            printf >&2 'Usage: git related-files FILE_PATH\n'; \
            return 2; \
        fi; \
        local FILE_PATH=\"$1\"; \
        if [ ! -e \"$FILE_PATH\" ]; then \
            printf >&2 \"Error: File '%s' not found in the working tree.\n\" \"$FILE_PATH\"; \
            return 2; \
        fi; \
        printf \"Unique Files:\n\"; \
        git log --format=format:%H -- \"$FILE_PATH\" \
            | xargs -L 1 git diff-tree --no-commit-id --name-only -r \
            | sort \
            | uniq -c | sort -b -n -r; \
    }; f"

    ##? Usage: git file-last-commit FILE_PATH
    ##?
    ##? Show the last commit that modified the specified FILE_PATH.
    file-last-commit = "!f() { \
        if [ $# -ne 1 ]; then \
            printf >&2 'Usage: git file-last-commit FILE_PATH\n'; \
            return 2; \
        fi; \
        local FILE_PATH=\"$1\"; \
        git log -n 1 --all --date-order -- \"$FILE_PATH\"; \
    }; f"

    ##? Usage: git file-last-commits FILE_PATH
    ##?
    ##? Show the most recent commits for a specific file or directory across all local branches.
    file-last-commits = "!f() { \
        if [ $# -ne 1 ]; then \
            printf >&2 'Usage: git file-last-commits FILE_PATH\n'; \
            return 2; \
        fi; \
        local FILE_PATH=\"$1\"; \
        local local_branches=$(git local-branches); \
        for branch in $local_branches; do \
            printf \"$(git log --decorate=no -1 \
                               --format=\"%at:%C(green)%ad%C(reset) %C(yellow)%h%C(auto)%d%C(reset) %s %C(blue)<%an>%C(reset)\" \
                               --color=always $branch -- \"$FILE_PATH\") $(tput bold)$branch$(tput sgr0)\n\"; \
        done | sort -r | sed 's#^[0-9]*:##g'; \
    }; f"

    ##? Alias for 'file-last-commits'.
    wwflu = file-last-commits

    file-last-commits2 = "!f() { \
        if [ $# -ne 1 ]; then \
            printf >&2 'Usage: git file-last-commits2 FILE_PATH\n'; \
            return 2; \
        fi; \
        local FILE_PATH=\"$1\"; \
        git for-each-ref --format=\"%(refname:short) %(objectname)\" refs/heads/ | \
        while read branch commit_hash; do \
            local commit_info=$(git log -n 1 \
                                    --pretty=format:'\\e[32m%ad \\e[33m%h \\e[0m%s \\e[34m<%an>\\e[0m' \
                                    --date=format-local:'%Y-%m-%d' \"$commit_hash\" -- \"$FILE_PATH\"); \
            if [ -n \"$commit_info\" ]; then \
                echo -e \"$commit_info \\e[32;1m$branch\\e[0m\"; \
            fi; \
        done | sort -k1,1r; \
    }; f"

    praise = blame -w
    archeology = blame -w -C -n

    # Given a merge commit, find the span of commits that exist(ed).
    # Not so useful in itself, but used by other aliases.
    # Thanks to Rob Miller for the merge-span-* aliaes.
    merge-span = "!f() { \
        echo $(git log -1 --merges --pretty=format:%P $2 | cut -d' ' -f1)\"$1\"$(git log -1 --merges --pretty=format:%P $2 | cut -d' ' -f2); \
    }; f"

    # Find the commits that were introduced by a merge
    merge-span-log = "!f() { \
        git log $(git merge-span .. \"$1\"); \
    }; f"

    # Show the changes that were introduced by a merge
    merge-span-diff = "!f() { \
        git diff $(git merge-span ... \"$1\"); \
    }; f"

    # Show the changes that were introduced by a merge, in your difftool
    merge-span-difftool = "!f() { \
        git difftool $(git merge-span ... \"$1\"); \
    }; f"

    ##? Usage: git r
    ##?
    ##? Get the default remote name and print its URL.
    r = "!f() { \
        local remote_name=$(git origin); \
        git remote get-url \"$remote_name\"; \
    }; f"

    ##? Usage: git incoming
    ##?
    ##? Fetch changes from the remote and shows incoming commits.
    incoming = "!f() { \
        git fetch \
            && git log HEAD..@{u}; \
    }; f"
    # TODO: Add optional argument BRANCH_NAME, and delete alias incoming-on-branch

    ##? Alias for 'incoming'.
    in = incoming

    # Show log of new commits after you fetched, with stats, excluding merges
    log-fresh = log --no-merges --stat ORIG_HEAD..

    # Usage: git incoming-on-branch BRANCH_NAME
    # Show new commits found in the remote repository.
    # Example: git incoming-on-branch master
    incoming-on-branch = !sh -c 'git fetch' \
                && git log ..$(git origin)/$1

    # Usage: git who-is-changing-branch BRANCH_NAME
    who-is-changing-branch = !sh -c 'git shortlog HEAD..$(git origin)/$0'
    # TODO: Add fetch?

    ##? Fetch updates from the remote repository and shows the difference
    ##? statistics between local HEAD and @{u}.
    incoming-files = "!f() { \
        git fetch \
            && git diff --stat HEAD...@{u}; \
    }; f"

    ##? Alias for 'incoming-files'.
    in-files = incoming-files

    incoming-diff = diff @{u} HEAD
    # diff with upstream branch

    # Get everything new.
    update = !git pull                     && git submodule update --init --recursive
    get    = !git pull --rebase            && git submodule update --init --recursive
    update = !git pull --rebase --prune $@ && git submodule update --init --recursive

    # Pull in remote changes for the current repository and all its submodules
    p = !"git pull; git submodule foreach git pull $(git origin) master"

    # Retrieve the timestamp of the most recent pull operation, regardless of changes being present.
    latest-pull-time = "!f() { \
        local fetch_head_time=$(stat -c %y $(git root)/.git/FETCH_HEAD | cut -d'.' -f1); \
        printf \"Latest pull time: %s\n\" \"$fetch_head_time\"; \
    }; f"
    # For the latest pull (even if there's nothing new).

    # Retrieve the timestamp of the last update to your current branch from the remote master branch, considering changes received.
    latest-update-time = "!f() { \
        local current_branch=$(git current-branch); \
        local update_time=$(stat -c %y $(git root)/.git/refs/heads/$current_branch | cut -d'.' -f1); \
        printf \"Latest update time for branch '%s': %s\n\" \"$current_branch\" \"$update_time\"; \
    }; f"
    # For the latest pull resulting in changes coming in from the remote master
    # branch (the timestamp won't change when git pull reports there are no
    # changes).

    # Pull the latest changes for the current branch from its remote counterpart.
    pull-current-branch = "!git pull $(git origin) $(git current-branch)"

    # Push the current branch to its remote counterpart.
    push-current-branch = "!git push $(git origin) $(git current-branch)"

    # Pull and push the latest changes for the current branch.
    pull-and-push-current-branch = "!f() { \
        pull-current-branch && push-current-branch; \
    }; f"

    # Update repository by pulling changes from remote and pushing local commits.
    pull-and-push = !git pull && git push

    # Avoid a fast-forward commit.
    mnf = merge --no-ff --log

    ##? Usage: git merge-into-main
    ##?
    ##? Merge changes from the current branch into the main branch.
    merge-into-main = "!f() { \
        local current_branch=\"$(git current-branch)\"; \
        if [ -z \"$current_branch\" ]; then \
            printf >&2 'Unable to determine current branch.\n'; \
            return 2; \
        fi; \
        git checkout \"$(git main-branch)\" && \
        if git merge \"$current_branch\"; then \
            printf \"\\033[1mBranch merged:\\033[0m '%s' successfully merged\n\" \"$current_branch\"; \
        else \
            printf >&2 \"\\033[1mUnable to merge branch:\\033[0m\n\"; \
            return 2; \
        fi; \
        git checkout \"$current_branch\"; \
    }; f"

    # Usage: git merge-update-push TARGET_BRANCH
    # Merge changes from the current branch into the specified target branch, updates it, and pushes changes.
    merge-update-push = "!f() { \
        local current_branch=\"$(git current-branch)\"; \
        local TARGET_BRANCH=\"$1\"; \
        git checkout \"$TARGET_BRANCH\" \
            && git pull \
            && git merge \"$current_branch\" \
            && git push \
            && git checkout \"$current_branch\"; \
    }; f"

    # Run merge test (before merge) to check for any conflicts beforehand.
    merge-test = "!f() { \
        git merge --no-commit --no-ff \"$1\"; \
        git merge --abort; \
        echo \"Merge aborted\"; \
    }; f"

    ##? Usage: git dry-merge1 BRANCH_TO_MERGE
    ##?
    ##? Simulate a "dry run" merge of a branch into the current branch.
    ##?
    ##? Example:
    ##?   git dry-merge1 feature # Merge the `feature` branch without committing the changes.
    dry-merge1 = "!f() { \
        if [ $# -ne 1 ]; then \
            printf >&2 'Usage: git dry-merge1 BRANCH_NAME\n'; \
            return 2; \
        fi; \
        local BRANCH_TO_MERGE=\"$1\"; \
        git merge --no-commit \"$BRANCH_TO_MERGE\"; \
        git reset; \
    }; f"

    ##? Usage: git dry-merge2 BRANCH_TO_MERGE
    ##?
    ##? Simulate a "dry run" merge of a branch into the current branch.
    ##?
    ##? Example:
    ##?   git dry-merge2 feature # Merge the `feature` branch without committing the changes.
    dry-merge2 = "!f() { \
        if [ $# -ne 1 ]; then \
            printf >&2 'Usage: git dry-merge2 BRANCH_NAME\n'; \
            return 2; \
        fi; \
        local BRANCH_TO_MERGE=\"$1\"; \
        git merge --no-commit --no-ff \"$BRANCH_TO_MERGE\"; \
    }; f"

    # Usage: git merge-dry-run BRANCH_NAME
    # Check how the merge of BRANCH_NAME into master will go
    merge-dry-run = "!f() { \
        grep -q 'changed in both' <<< $(git merge-tree $(git merge-base FETCH_HEAD \"$1\") FETCH_HEAD \"$1\") \
            && echo 'Merge conflicts!' \
            || echo 'This branch can be automatically merged.'; \
    }; f"
# XXX DOESN'T work for git fetch & git merge

    # Extract the "changed in both" lines as well as the conflicting parts.
    merge-dry-run-conflicts = "!f() { \
        git merge-tree $(git merge-base \"$1\" $2) \"$1\" $2 \
            | sed -n '/+<<<<<<< .our/,/+>>>>>>> .their/p;/^changed in both/{n;N;N;s/^/#/mg;p}' \
            | cdiff; \
    }; f"

    ours = "!f() { \
        git checkout --ours $@ \
            && git add $@; \
    }; f"

    theirs = "!f() { \
        git checkout --theirs $@ \
            && git add $@; \
    }; f"

    ##? Usage: git conflicted-files
    ##?
    ##? List files with merge conflicts only.
    conflicted-files = diff --name-only --diff-filter=U

    edit-unmerged = "!$EDITOR $(git conflicted-files)"

    add-unmerged = "!git add $(git conflicted-files)"

    # Create a feature branch.
    feature = "!f() { \
        git create-branch feature/\"$1\" develop; \
    }; f"
    # XXX or feature-start?

    # Incorporate a finished feature on develop.
    feature-finish = "!f() { \
        git checkout develop; \
        git merge --no-ff feature/\"$1\" \
            && git delete-local-branch feature/\"$1\"; \
    }; f"

    # XXX Also bug and refactor.

    # XXX release-start
    # XXX release-finish

    # Shortcut for checkout.
    co = checkout

    next = "!f() { \
        git checkout $(git rev-list --topo-order HEAD..master | tail -1); \
    }; f"

    # Stash local changes, checkout branch BRANCH, and reapply stashed changes.
    co-autostash = "!f() { \
        local BRANCH=\"$1\"; \
        git stash push --include-untracked --quiet \
            && git checkout \"$BRANCH\" \
            && git stash pop --quiet; \
    }; f"
    co-autostash = "!f() { \
        local BRANCH=\"$1\"; \
        git stash push --include-untracked \
            && git checkout \"$BRANCH\" \
            && git stash pop; \
    }; f"
    co-autostash = "!f() { \
        local BRANCH=\"$1\"; \
        git diff-index --quiet HEAD || git stash push --include-untracked \
            && git checkout \"$BRANCH\" \
            && { git stash list | grep -q \"^stash@{0}: WIP on\"; } \
            && git stash pop; \
    }; f"

    # "show-branch -g=N" can't be aliased for N easily, so we stop here:
    sb  = show-branch
    # pg sbt master pu -- if the last line is 'master' and not 'master~'
    # or 'master~N' then pu is a descendent of master
    sbt = show-branch --topics
    sbs = show-branch --sha1-name

    ##? Usage: git outgoing
    ##?
    ##? Show the commits on the local branch that are not on the remote branch
    ##? (local commits not pushed).
    outgoing = log @{u}..HEAD

    ##? Alias for 'outgoing'.
    out = outgoing

    ##? Usage: git outgoing-files
    ##?
    ##? Show the difference statistics between the remote branch and local HEAD.
    outgoing-files = diff --stat @{u}...

    ##? Alias for 'outgoing-files'.
    out-files = outgoing-files

    # Usage: git outgoing-all
    # Show commits not found in the destination repository.
    outgoing-all = log --branches --not --remotes

    # Alias for 'outgoing-all'.
    out-all = outgoing-all

    # Usage: git divergence BRANCH_NAME
    divergence = "!f() { \
        git log --cherry-pick --left-right --graph \"$1\"...$(git origin)/\"$1\"; \
    }; f"

    # Usage: git sha1-tag COMMIT
    sha1-tag = "!f() { \
        git name-rev --name-only \"$@\"; \
    }; f"

    lll = log -u

    # Apply a patch to files and/or to the index from URL.
    apply-url = "!f() { \
        curl -s \"$1\" 2>nul \
            | git apply ${@:2}; \
    }; f"

    # Apply a series of patches from an URL.
    am-url = "!f() { \
        curl -s \"$1\" 2>nul \
            | git am ${@:2}; \
    }; f"

    # Interactive apply patch.
    ipatch = "!f() { \
        git apply \"$1\"; \
        git add -p; \
    }; f"

    ##? Usage: git today [AUTHOR]
    ##?
    ##? Show today's commits.
    today = "!f() { \
        git log \
            --since=midnight \
            --author=\"${1-$(git config --get user.name)}\" \
            --no-merges \
            --all \
            --pretty='%C(green)%ad%C(auto) - %s%C(auto)%d' \
            --date=format:'%Y-%m-%d %a %H:%M'; \
    }; f"

    ##? Usage: git yesterday [AUTHOR]
    ##?
    ##? Show yesterday's commits.
    yesterday = "!f() { \
        git log \
            --since='1 day ago midnight' --until=midnight \
            --author=\"${1-$(git config --get user.name)}\" \
            --no-merges \
            --all \
            --pretty='%C(green)%ad%C(auto) - %s%C(auto)%d' \
            --date=format:'%Y-%m-%d %a %H:%M'; \
    }; f"

    ##? Usage: git this-week [AUTHOR]
    ##?
    ##? Show commits from this week.
    this-week = "!f() { \
        git log \
            --since='1 week ago' \
            --author=\"${1-$(git config --get user.name)}\" \
            --no-merges \
            --all \
            --pretty='%C(green)%ad%C(auto) - %s%C(auto)%d' \
            --date=format:'%Y-%m-%d %a %H:%M'; \
    }; f"

    # Usage: git standup [AUTHOR]
    # Summarize changes since 24h, suitable for a daily standup meeting.
    standup = "!f() { \
        local today=$(date +%a); \
        if [ \"$today\" = \"Mon\" ]; then \
            since=\"last.Friday\"; \
        else \
            since=\"yesterday\"; \
        fi; \
        author=\"${1-$(git config --get user.name)}\"; \
        git log \
            --all \
            --since=\"$since\" \
            --author=\"$author\" \
            --format=format:'%C(green)%ad%C(reset) - %s%C(auto)%d' \
            --date=format:'%Y-%m-%d %a %H:%M'; \
        printf '\n'; \
    }; f"

    # Enable comprehensive debugging output.
    debug = "!set -x; GIT_TRACE=2 GIT_CURL_VERBOSE=2 GIT_TRACE_PERFORMANCE=2 GIT_TRACE_PACK_ACCESS=2 GIT_TRACE_PACKET=2 GIT_TRACE_PACKFILE=2 GIT_TRACE_SETUP=2 GIT_TRACE_SHALLOW=2 git"

    cp = cherry-pick -x
    pick = cherry-pick -s

    # cherry-pick - apply the changes introduced by some existing commits; useful for moving small chunks of code between branches.
    cp = cherry-pick

    # cherry-pick without making a commit, and when when recording the commit, append a line that says "(cherry picked from commit ...)"
    cp-nx = cherry-pick --no-commit -x

    root = rev-parse --show-toplevel
    root-relative = rev-parse --show-prefix

    # Usage: git commit-interactive FILENAME...
    # Interactively stage changes and commit, or abort.
    commit-interactive = "!f() { \
        if [ \"$(git root)\" != \"$(pwd)\" ]; then \
            printf >&2 'Error: Not at the root of the Git repository.'; \
            return 2; \
        fi; \
        (git add -p -- \"$@\" && git commit) || git reset; \
    }; f"

    # Alias for 'commit-interactive'.
    record = commit-interactive

    lost = "!git fsck \
                | awk '/dangling commit/ {print $3}' \
                | git show --format='SHA-1: %C(yellow)%h%C(reset)  %s' --stdin \
                | awk '/SHA-1/ {sub(\"SHA-1: \", \"\"); print}'"

    # Show a graph of the commit history, including dangling commits (not reachable by any reference).
    dangling-graph-log = !git log --all --pretty=oneline --abbrev-commit --graph \
                    $(git fsck --no-reflogs | grep commit | cut -d\\  -f3)
